
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000988  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000af8  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004c6  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b7 04 	call	0x96e	; 0x96e <main>
  64:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enuInit>:
#include "errorStates.h"
#include "DIO_priv.h"
#include "DIO_config.h"


ES_t DIO_enuInit(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState  = ES_NOK ;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	89 83       	std	Y+1, r24	; 0x01

    DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	8a e9       	ldi	r24, 0x9A	; 154
  80:	80 83       	st	Z, r24
    DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
  82:	e7 e3       	ldi	r30, 0x37	; 55
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	8a e9       	ldi	r24, 0x9A	; 154
  88:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
  8a:	e4 e3       	ldi	r30, 0x34	; 52
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	8a e9       	ldi	r24, 0x9A	; 154
  90:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
  92:	e1 e3       	ldi	r30, 0x31	; 49
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	8a e9       	ldi	r24, 0x9A	; 154
  98:	80 83       	st	Z, r24

	PORTA =  CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
  9a:	eb e3       	ldi	r30, 0x3B	; 59
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	89 e9       	ldi	r24, 0x99	; 153
  a0:	80 83       	st	Z, r24
	PORTB =  CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
  a2:	e8 e3       	ldi	r30, 0x38	; 56
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	89 e9       	ldi	r24, 0x99	; 153
  a8:	80 83       	st	Z, r24
	PORTC =  CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
  aa:	e5 e3       	ldi	r30, 0x35	; 53
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	89 e9       	ldi	r24, 0x99	; 153
  b0:	80 83       	st	Z, r24
	PORTD =  CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
  b2:	e2 e3       	ldi	r30, 0x32	; 50
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	89 e9       	ldi	r24, 0x99	; 153
  b8:	80 83       	st	Z, r24
	Local_enuErrorState  = ES_OK;
  ba:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
  bc:	89 81       	ldd	r24, Y+1	; 0x01
}
  be:	0f 90       	pop	r0
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	08 95       	ret

000000c6 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value){
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	00 d0       	rcall	.+0      	; 0xcc <DIO_enuSetPortDirection+0x6>
  cc:	00 d0       	rcall	.+0      	; 0xce <DIO_enuSetPortDirection+0x8>
  ce:	0f 92       	push	r0
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	8a 83       	std	Y+2, r24	; 0x02
  d6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK ;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	89 83       	std	Y+1, r24	; 0x01
     if(Copy_u8PortID <= DIO_PORTD){
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	84 30       	cpi	r24, 0x04	; 4
  e0:	a0 f5       	brcc	.+104    	; 0x14a <DIO_enuSetPortDirection+0x84>
    	 switch(Copy_u8PortID)
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	3d 83       	std	Y+5, r19	; 0x05
  ea:	2c 83       	std	Y+4, r18	; 0x04
  ec:	8c 81       	ldd	r24, Y+4	; 0x04
  ee:	9d 81       	ldd	r25, Y+5	; 0x05
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	91 05       	cpc	r25, r1
  f4:	d1 f0       	breq	.+52     	; 0x12a <DIO_enuSetPortDirection+0x64>
  f6:	2c 81       	ldd	r18, Y+4	; 0x04
  f8:	3d 81       	ldd	r19, Y+5	; 0x05
  fa:	22 30       	cpi	r18, 0x02	; 2
  fc:	31 05       	cpc	r19, r1
  fe:	2c f4       	brge	.+10     	; 0x10a <DIO_enuSetPortDirection+0x44>
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	9d 81       	ldd	r25, Y+5	; 0x05
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	61 f0       	breq	.+24     	; 0x120 <DIO_enuSetPortDirection+0x5a>
 108:	1e c0       	rjmp	.+60     	; 0x146 <DIO_enuSetPortDirection+0x80>
 10a:	2c 81       	ldd	r18, Y+4	; 0x04
 10c:	3d 81       	ldd	r19, Y+5	; 0x05
 10e:	22 30       	cpi	r18, 0x02	; 2
 110:	31 05       	cpc	r19, r1
 112:	81 f0       	breq	.+32     	; 0x134 <DIO_enuSetPortDirection+0x6e>
 114:	8c 81       	ldd	r24, Y+4	; 0x04
 116:	9d 81       	ldd	r25, Y+5	; 0x05
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	91 05       	cpc	r25, r1
 11c:	81 f0       	breq	.+32     	; 0x13e <DIO_enuSetPortDirection+0x78>
 11e:	13 c0       	rjmp	.+38     	; 0x146 <DIO_enuSetPortDirection+0x80>
    	 {
    	 case DIO_PORTA :
    		 DDRA = Copy_u8Value;
 120:	ea e3       	ldi	r30, 0x3A	; 58
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	80 83       	st	Z, r24
 128:	0e c0       	rjmp	.+28     	; 0x146 <DIO_enuSetPortDirection+0x80>
    		 break;
    	 case DIO_PORTB :
    	     DDRB = Copy_u8Value;
 12a:	e7 e3       	ldi	r30, 0x37	; 55
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	80 83       	st	Z, r24
 132:	09 c0       	rjmp	.+18     	; 0x146 <DIO_enuSetPortDirection+0x80>
    	     break;
    	 case DIO_PORTC :
    	     DDRC = Copy_u8Value;
 134:	e4 e3       	ldi	r30, 0x34	; 52
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	80 83       	st	Z, r24
 13c:	04 c0       	rjmp	.+8      	; 0x146 <DIO_enuSetPortDirection+0x80>
    	     break;
    	 case DIO_PORTD :
    	     DDRD = Copy_u8Value;
 13e:	e1 e3       	ldi	r30, 0x31	; 49
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	80 83       	st	Z, r24
    	     break;
    	 }
    	 Local_enuErrorState = ES_OK;
 146:	19 82       	std	Y+1, r1	; 0x01
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_enuSetPortDirection+0x88>
     }
     else{
    	 Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	89 83       	std	Y+1, r24	; 0x01
     }

	return Local_enuErrorState;
 14e:	89 81       	ldd	r24, Y+1	; 0x01
}
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	cf 91       	pop	r28
 15c:	df 91       	pop	r29
 15e:	08 95       	ret

00000160 <DIO_enuSetValue>:
ES_t DIO_enuSetValue(u8 Copy_u8PortID , u8 Copy_u8Value){
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	00 d0       	rcall	.+0      	; 0x166 <DIO_enuSetValue+0x6>
 166:	00 d0       	rcall	.+0      	; 0x168 <DIO_enuSetValue+0x8>
 168:	0f 92       	push	r0
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	8a 83       	std	Y+2, r24	; 0x02
 170:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK ;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	89 83       	std	Y+1, r24	; 0x01
	 if(Copy_u8PortID <= DIO_PORTD){
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	84 30       	cpi	r24, 0x04	; 4
 17a:	a0 f5       	brcc	.+104    	; 0x1e4 <DIO_enuSetValue+0x84>
	    	 switch(Copy_u8PortID)
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	28 2f       	mov	r18, r24
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	3d 83       	std	Y+5, r19	; 0x05
 184:	2c 83       	std	Y+4, r18	; 0x04
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	9d 81       	ldd	r25, Y+5	; 0x05
 18a:	81 30       	cpi	r24, 0x01	; 1
 18c:	91 05       	cpc	r25, r1
 18e:	d1 f0       	breq	.+52     	; 0x1c4 <DIO_enuSetValue+0x64>
 190:	2c 81       	ldd	r18, Y+4	; 0x04
 192:	3d 81       	ldd	r19, Y+5	; 0x05
 194:	22 30       	cpi	r18, 0x02	; 2
 196:	31 05       	cpc	r19, r1
 198:	2c f4       	brge	.+10     	; 0x1a4 <DIO_enuSetValue+0x44>
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	9d 81       	ldd	r25, Y+5	; 0x05
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	61 f0       	breq	.+24     	; 0x1ba <DIO_enuSetValue+0x5a>
 1a2:	1e c0       	rjmp	.+60     	; 0x1e0 <DIO_enuSetValue+0x80>
 1a4:	2c 81       	ldd	r18, Y+4	; 0x04
 1a6:	3d 81       	ldd	r19, Y+5	; 0x05
 1a8:	22 30       	cpi	r18, 0x02	; 2
 1aa:	31 05       	cpc	r19, r1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <DIO_enuSetValue+0x6e>
 1ae:	8c 81       	ldd	r24, Y+4	; 0x04
 1b0:	9d 81       	ldd	r25, Y+5	; 0x05
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	91 05       	cpc	r25, r1
 1b6:	81 f0       	breq	.+32     	; 0x1d8 <DIO_enuSetValue+0x78>
 1b8:	13 c0       	rjmp	.+38     	; 0x1e0 <DIO_enuSetValue+0x80>
	    	 {
	    	 case DIO_PORTA :
	    		 PORTA = Copy_u8Value;
 1ba:	eb e3       	ldi	r30, 0x3B	; 59
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	80 83       	st	Z, r24
 1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <DIO_enuSetValue+0x80>
	    		 break;
	    	 case DIO_PORTB :
	    	     PORTB = Copy_u8Value;
 1c4:	e8 e3       	ldi	r30, 0x38	; 56
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	80 83       	st	Z, r24
 1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <DIO_enuSetValue+0x80>
	    	     break;
	    	 case DIO_PORTC :
	    	     PORTC = Copy_u8Value;
 1ce:	e5 e3       	ldi	r30, 0x35	; 53
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	80 83       	st	Z, r24
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <DIO_enuSetValue+0x80>
	    	     break;
	    	 case DIO_PORTD :
	    	     PORTD = Copy_u8Value;
 1d8:	e2 e3       	ldi	r30, 0x32	; 50
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8b 81       	ldd	r24, Y+3	; 0x03
 1de:	80 83       	st	Z, r24
	    	     break;
	    	 }
	    	 Local_enuErrorState = ES_OK;
 1e0:	19 82       	std	Y+1, r1	; 0x01
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_enuSetValue+0x88>
	     }
	     else{
	    	 Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	89 83       	std	Y+1, r24	; 0x01
	     }
	return Local_enuErrorState;
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

000001fa <DIO_enuTogPortValue>:
ES_t DIO_enuTogPortValue(u8 Copy_u8PortID){
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	00 d0       	rcall	.+0      	; 0x200 <DIO_enuTogPortValue+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <DIO_enuTogPortValue+0x8>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	89 83       	std	Y+1, r24	; 0x01
	 if(Copy_u8PortID <= DIO_PORTD){
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	84 30       	cpi	r24, 0x04	; 4
 210:	08 f0       	brcs	.+2      	; 0x214 <DIO_enuTogPortValue+0x1a>
 212:	40 c0       	rjmp	.+128    	; 0x294 <DIO_enuTogPortValue+0x9a>
	    	 switch(Copy_u8PortID)
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	3c 83       	std	Y+4, r19	; 0x04
 21c:	2b 83       	std	Y+3, r18	; 0x03
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	9c 81       	ldd	r25, Y+4	; 0x04
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	91 05       	cpc	r25, r1
 226:	e9 f0       	breq	.+58     	; 0x262 <DIO_enuTogPortValue+0x68>
 228:	2b 81       	ldd	r18, Y+3	; 0x03
 22a:	3c 81       	ldd	r19, Y+4	; 0x04
 22c:	22 30       	cpi	r18, 0x02	; 2
 22e:	31 05       	cpc	r19, r1
 230:	2c f4       	brge	.+10     	; 0x23c <DIO_enuTogPortValue+0x42>
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	9c 81       	ldd	r25, Y+4	; 0x04
 236:	00 97       	sbiw	r24, 0x00	; 0
 238:	61 f0       	breq	.+24     	; 0x252 <DIO_enuTogPortValue+0x58>
 23a:	2a c0       	rjmp	.+84     	; 0x290 <DIO_enuTogPortValue+0x96>
 23c:	2b 81       	ldd	r18, Y+3	; 0x03
 23e:	3c 81       	ldd	r19, Y+4	; 0x04
 240:	22 30       	cpi	r18, 0x02	; 2
 242:	31 05       	cpc	r19, r1
 244:	b1 f0       	breq	.+44     	; 0x272 <DIO_enuTogPortValue+0x78>
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	9c 81       	ldd	r25, Y+4	; 0x04
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	91 05       	cpc	r25, r1
 24e:	c9 f0       	breq	.+50     	; 0x282 <DIO_enuTogPortValue+0x88>
 250:	1f c0       	rjmp	.+62     	; 0x290 <DIO_enuTogPortValue+0x96>
	    	 {
	    	 case DIO_PORTA :
	    		 PORTA = ~PORTA;
 252:	ab e3       	ldi	r26, 0x3B	; 59
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	eb e3       	ldi	r30, 0x3B	; 59
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	80 95       	com	r24
 25e:	8c 93       	st	X, r24
 260:	17 c0       	rjmp	.+46     	; 0x290 <DIO_enuTogPortValue+0x96>
	    		 break;
	    	 case DIO_PORTB :
	    		 PORTB = ~PORTB;
 262:	a8 e3       	ldi	r26, 0x38	; 56
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	e8 e3       	ldi	r30, 0x38	; 56
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 95       	com	r24
 26e:	8c 93       	st	X, r24
 270:	0f c0       	rjmp	.+30     	; 0x290 <DIO_enuTogPortValue+0x96>
	    	     break;
	    	 case DIO_PORTC :
	    		 PORTC = ~PORTC;
 272:	a5 e3       	ldi	r26, 0x35	; 53
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	e5 e3       	ldi	r30, 0x35	; 53
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 95       	com	r24
 27e:	8c 93       	st	X, r24
 280:	07 c0       	rjmp	.+14     	; 0x290 <DIO_enuTogPortValue+0x96>
	    	     break;
	    	 case DIO_PORTD :
	    		 PORTD = ~PORTD;
 282:	a2 e3       	ldi	r26, 0x32	; 50
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	e2 e3       	ldi	r30, 0x32	; 50
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 95       	com	r24
 28e:	8c 93       	st	X, r24
	    	     break;
	    	 }
	    	 Local_enuErrorState = ES_OK;
 290:	19 82       	std	Y+1, r1	; 0x01
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_enuTogPortValue+0x9e>
	     }
	     else{
	    	 Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	89 83       	std	Y+1, r24	; 0x01
	     }
	return Local_enuErrorState;
 298:	89 81       	ldd	r24, Y+1	; 0x01
}
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	08 95       	ret

000002a8 <DIO_enuGetPortValue>:
ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8 * Copy_pu8Value){
 2a8:	df 93       	push	r29
 2aa:	cf 93       	push	r28
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_enuGetPortValue+0x6>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <DIO_enuGetPortValue+0x8>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <DIO_enuGetPortValue+0xa>
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	7c 83       	std	Y+4, r23	; 0x04
 2ba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK ;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL){
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	9c 81       	ldd	r25, Y+4	; 0x04
 2c4:	00 97       	sbiw	r24, 0x00	; 0
 2c6:	09 f4       	brne	.+2      	; 0x2ca <DIO_enuGetPortValue+0x22>
 2c8:	42 c0       	rjmp	.+132    	; 0x34e <DIO_enuGetPortValue+0xa6>
			 if(Copy_u8PortID <= DIO_PORTD){
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	84 30       	cpi	r24, 0x04	; 4
 2ce:	e0 f5       	brcc	.+120    	; 0x348 <DIO_enuGetPortValue+0xa0>
				     switch(Copy_u8PortID)
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	28 2f       	mov	r18, r24
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	3e 83       	std	Y+6, r19	; 0x06
 2d8:	2d 83       	std	Y+5, r18	; 0x05
 2da:	8d 81       	ldd	r24, Y+5	; 0x05
 2dc:	9e 81       	ldd	r25, Y+6	; 0x06
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	91 05       	cpc	r25, r1
 2e2:	e1 f0       	breq	.+56     	; 0x31c <DIO_enuGetPortValue+0x74>
 2e4:	2d 81       	ldd	r18, Y+5	; 0x05
 2e6:	3e 81       	ldd	r19, Y+6	; 0x06
 2e8:	22 30       	cpi	r18, 0x02	; 2
 2ea:	31 05       	cpc	r19, r1
 2ec:	2c f4       	brge	.+10     	; 0x2f8 <DIO_enuGetPortValue+0x50>
 2ee:	8d 81       	ldd	r24, Y+5	; 0x05
 2f0:	9e 81       	ldd	r25, Y+6	; 0x06
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	61 f0       	breq	.+24     	; 0x30e <DIO_enuGetPortValue+0x66>
 2f6:	26 c0       	rjmp	.+76     	; 0x344 <DIO_enuGetPortValue+0x9c>
 2f8:	2d 81       	ldd	r18, Y+5	; 0x05
 2fa:	3e 81       	ldd	r19, Y+6	; 0x06
 2fc:	22 30       	cpi	r18, 0x02	; 2
 2fe:	31 05       	cpc	r19, r1
 300:	a1 f0       	breq	.+40     	; 0x32a <DIO_enuGetPortValue+0x82>
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
 306:	83 30       	cpi	r24, 0x03	; 3
 308:	91 05       	cpc	r25, r1
 30a:	b1 f0       	breq	.+44     	; 0x338 <DIO_enuGetPortValue+0x90>
 30c:	1b c0       	rjmp	.+54     	; 0x344 <DIO_enuGetPortValue+0x9c>
				     {
				      case DIO_PORTA :
				    	  * Copy_pu8Value = PINA;
 30e:	e9 e3       	ldi	r30, 0x39	; 57
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	eb 81       	ldd	r30, Y+3	; 0x03
 316:	fc 81       	ldd	r31, Y+4	; 0x04
 318:	80 83       	st	Z, r24
 31a:	14 c0       	rjmp	.+40     	; 0x344 <DIO_enuGetPortValue+0x9c>
				    	 break;
				      case DIO_PORTB :
				    	  * Copy_pu8Value = PINB;
 31c:	e6 e3       	ldi	r30, 0x36	; 54
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	eb 81       	ldd	r30, Y+3	; 0x03
 324:	fc 81       	ldd	r31, Y+4	; 0x04
 326:	80 83       	st	Z, r24
 328:	0d c0       	rjmp	.+26     	; 0x344 <DIO_enuGetPortValue+0x9c>
				         break;
				      case DIO_PORTC :
				    	  * Copy_pu8Value = PINC;
 32a:	e3 e3       	ldi	r30, 0x33	; 51
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	eb 81       	ldd	r30, Y+3	; 0x03
 332:	fc 81       	ldd	r31, Y+4	; 0x04
 334:	80 83       	st	Z, r24
 336:	06 c0       	rjmp	.+12     	; 0x344 <DIO_enuGetPortValue+0x9c>
				    	 break;
				      case DIO_PORTD :
				    	  * Copy_pu8Value = PIND;
 338:	e0 e3       	ldi	r30, 0x30	; 48
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	eb 81       	ldd	r30, Y+3	; 0x03
 340:	fc 81       	ldd	r31, Y+4	; 0x04
 342:	80 83       	st	Z, r24
				    	 break;
				       }
				    	 Local_enuErrorState = ES_OK;
 344:	19 82       	std	Y+1, r1	; 0x01
 346:	05 c0       	rjmp	.+10     	; 0x352 <DIO_enuGetPortValue+0xaa>
				     }
			  else {
				    	Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	89 83       	std	Y+1, r24	; 0x01
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_enuGetPortValue+0xaa>
				  }
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 352:	89 81       	ldd	r24, Y+1	; 0x01
}
 354:	26 96       	adiw	r28, 0x06	; 6
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	cf 91       	pop	r28
 362:	df 91       	pop	r29
 364:	08 95       	ret

00000366 <DIO_enuSetPinDirection>:
//pins
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8Value ,u8 Copy_u8PinID){
 366:	df 93       	push	r29
 368:	cf 93       	push	r28
 36a:	00 d0       	rcall	.+0      	; 0x36c <DIO_enuSetPinDirection+0x6>
 36c:	00 d0       	rcall	.+0      	; 0x36e <DIO_enuSetPinDirection+0x8>
 36e:	00 d0       	rcall	.+0      	; 0x370 <DIO_enuSetPinDirection+0xa>
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	8a 83       	std	Y+2, r24	; 0x02
 376:	6b 83       	std	Y+3, r22	; 0x03
 378:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState  = ES_NOK ;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <=DIO_PIN7) && (Copy_u8Value <= OUTPUT)){
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	84 30       	cpi	r24, 0x04	; 4
 382:	08 f0       	brcs	.+2      	; 0x386 <DIO_enuSetPinDirection+0x20>
 384:	d0 c0       	rjmp	.+416    	; 0x526 <DIO_enuSetPinDirection+0x1c0>
 386:	8c 81       	ldd	r24, Y+4	; 0x04
 388:	88 30       	cpi	r24, 0x08	; 8
 38a:	08 f0       	brcs	.+2      	; 0x38e <DIO_enuSetPinDirection+0x28>
 38c:	cc c0       	rjmp	.+408    	; 0x526 <DIO_enuSetPinDirection+0x1c0>
 38e:	8b 81       	ldd	r24, Y+3	; 0x03
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	08 f0       	brcs	.+2      	; 0x396 <DIO_enuSetPinDirection+0x30>
 394:	c8 c0       	rjmp	.+400    	; 0x526 <DIO_enuSetPinDirection+0x1c0>
		switch(Copy_u8PortID){
 396:	8a 81       	ldd	r24, Y+2	; 0x02
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	3e 83       	std	Y+6, r19	; 0x06
 39e:	2d 83       	std	Y+5, r18	; 0x05
 3a0:	6d 81       	ldd	r22, Y+5	; 0x05
 3a2:	7e 81       	ldd	r23, Y+6	; 0x06
 3a4:	61 30       	cpi	r22, 0x01	; 1
 3a6:	71 05       	cpc	r23, r1
 3a8:	09 f4       	brne	.+2      	; 0x3ac <DIO_enuSetPinDirection+0x46>
 3aa:	41 c0       	rjmp	.+130    	; 0x42e <DIO_enuSetPinDirection+0xc8>
 3ac:	8d 81       	ldd	r24, Y+5	; 0x05
 3ae:	9e 81       	ldd	r25, Y+6	; 0x06
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	91 05       	cpc	r25, r1
 3b4:	34 f4       	brge	.+12     	; 0x3c2 <DIO_enuSetPinDirection+0x5c>
 3b6:	2d 81       	ldd	r18, Y+5	; 0x05
 3b8:	3e 81       	ldd	r19, Y+6	; 0x06
 3ba:	21 15       	cp	r18, r1
 3bc:	31 05       	cpc	r19, r1
 3be:	71 f0       	breq	.+28     	; 0x3dc <DIO_enuSetPinDirection+0x76>
 3c0:	b0 c0       	rjmp	.+352    	; 0x522 <DIO_enuSetPinDirection+0x1bc>
 3c2:	6d 81       	ldd	r22, Y+5	; 0x05
 3c4:	7e 81       	ldd	r23, Y+6	; 0x06
 3c6:	62 30       	cpi	r22, 0x02	; 2
 3c8:	71 05       	cpc	r23, r1
 3ca:	09 f4       	brne	.+2      	; 0x3ce <DIO_enuSetPinDirection+0x68>
 3cc:	59 c0       	rjmp	.+178    	; 0x480 <DIO_enuSetPinDirection+0x11a>
 3ce:	8d 81       	ldd	r24, Y+5	; 0x05
 3d0:	9e 81       	ldd	r25, Y+6	; 0x06
 3d2:	83 30       	cpi	r24, 0x03	; 3
 3d4:	91 05       	cpc	r25, r1
 3d6:	09 f4       	brne	.+2      	; 0x3da <DIO_enuSetPinDirection+0x74>
 3d8:	7c c0       	rjmp	.+248    	; 0x4d2 <DIO_enuSetPinDirection+0x16c>
 3da:	a3 c0       	rjmp	.+326    	; 0x522 <DIO_enuSetPinDirection+0x1bc>
		case DIO_PORTA:
			DDRA &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 3dc:	aa e3       	ldi	r26, 0x3A	; 58
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	ea e3       	ldi	r30, 0x3A	; 58
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	48 2f       	mov	r20, r24
 3e8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_enuSetPinDirection+0x92>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	2a 95       	dec	r18
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_enuSetPinDirection+0x8e>
 3fc:	80 95       	com	r24
 3fe:	84 23       	and	r24, r20
 400:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value <<Copy_u8PinID);//set
 402:	aa e3       	ldi	r26, 0x3A	; 58
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	ea e3       	ldi	r30, 0x3A	; 58
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	48 2f       	mov	r20, r24
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	8c 81       	ldd	r24, Y+4	; 0x04
 416:	88 2f       	mov	r24, r24
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	b9 01       	movw	r22, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_enuSetPinDirection+0xbc>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	8a 95       	dec	r24
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_enuSetPinDirection+0xb8>
 426:	cb 01       	movw	r24, r22
 428:	84 2b       	or	r24, r20
 42a:	8c 93       	st	X, r24
 42c:	7a c0       	rjmp	.+244    	; 0x522 <DIO_enuSetPinDirection+0x1bc>
		break;
		case DIO_PORTB:
			DDRB &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 42e:	a7 e3       	ldi	r26, 0x37	; 55
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	e7 e3       	ldi	r30, 0x37	; 55
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	48 2f       	mov	r20, r24
 43a:	8c 81       	ldd	r24, Y+4	; 0x04
 43c:	28 2f       	mov	r18, r24
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_enuSetPinDirection+0xe4>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	2a 95       	dec	r18
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_enuSetPinDirection+0xe0>
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value <<Copy_u8PinID);//set
 454:	a7 e3       	ldi	r26, 0x37	; 55
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	e7 e3       	ldi	r30, 0x37	; 55
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	48 2f       	mov	r20, r24
 460:	8b 81       	ldd	r24, Y+3	; 0x03
 462:	28 2f       	mov	r18, r24
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	88 2f       	mov	r24, r24
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_enuSetPinDirection+0x10e>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	8a 95       	dec	r24
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_enuSetPinDirection+0x10a>
 478:	cb 01       	movw	r24, r22
 47a:	84 2b       	or	r24, r20
 47c:	8c 93       	st	X, r24
 47e:	51 c0       	rjmp	.+162    	; 0x522 <DIO_enuSetPinDirection+0x1bc>
		break;
		case DIO_PORTC:
			DDRC &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 480:	a4 e3       	ldi	r26, 0x34	; 52
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	e4 e3       	ldi	r30, 0x34	; 52
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8c 81       	ldd	r24, Y+4	; 0x04
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <DIO_enuSetPinDirection+0x136>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	2a 95       	dec	r18
 49e:	e2 f7       	brpl	.-8      	; 0x498 <DIO_enuSetPinDirection+0x132>
 4a0:	80 95       	com	r24
 4a2:	84 23       	and	r24, r20
 4a4:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value <<Copy_u8PinID);//set
 4a6:	a4 e3       	ldi	r26, 0x34	; 52
 4a8:	b0 e0       	ldi	r27, 0x00	; 0
 4aa:	e4 e3       	ldi	r30, 0x34	; 52
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	48 2f       	mov	r20, r24
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	28 2f       	mov	r18, r24
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ba:	88 2f       	mov	r24, r24
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_enuSetPinDirection+0x160>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_enuSetPinDirection+0x15c>
 4ca:	cb 01       	movw	r24, r22
 4cc:	84 2b       	or	r24, r20
 4ce:	8c 93       	st	X, r24
 4d0:	28 c0       	rjmp	.+80     	; 0x522 <DIO_enuSetPinDirection+0x1bc>
		break;
		case DIO_PORTD:
			DDRD &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 4d2:	a1 e3       	ldi	r26, 0x31	; 49
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e1 e3       	ldi	r30, 0x31	; 49
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8c 81       	ldd	r24, Y+4	; 0x04
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_enuSetPinDirection+0x188>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	2a 95       	dec	r18
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_enuSetPinDirection+0x184>
 4f2:	80 95       	com	r24
 4f4:	84 23       	and	r24, r20
 4f6:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value <<Copy_u8PinID);//set
 4f8:	a1 e3       	ldi	r26, 0x31	; 49
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e1 e3       	ldi	r30, 0x31	; 49
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	48 2f       	mov	r20, r24
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	28 2f       	mov	r18, r24
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	8c 81       	ldd	r24, Y+4	; 0x04
 50c:	88 2f       	mov	r24, r24
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_enuSetPinDirection+0x1b2>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_enuSetPinDirection+0x1ae>
 51c:	cb 01       	movw	r24, r22
 51e:	84 2b       	or	r24, r20
 520:	8c 93       	st	X, r24
		break;
		}
		Local_enuErrorState = ES_OK;
 522:	19 82       	std	Y+1, r1	; 0x01
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_enuSetPinDirection+0x1c4>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 526:	83 e0       	ldi	r24, 0x03	; 3
 528:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 52a:	89 81       	ldd	r24, Y+1	; 0x01
}
 52c:	26 96       	adiw	r28, 0x06	; 6
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	de bf       	out	0x3e, r29	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	cd bf       	out	0x3d, r28	; 61
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <DIO_enuSetPinValue>:
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value){
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	00 d0       	rcall	.+0      	; 0x544 <DIO_enuSetPinValue+0x6>
 544:	00 d0       	rcall	.+0      	; 0x546 <DIO_enuSetPinValue+0x8>
 546:	00 d0       	rcall	.+0      	; 0x548 <DIO_enuSetPinValue+0xa>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	8a 83       	std	Y+2, r24	; 0x02
 54e:	6b 83       	std	Y+3, r22	; 0x03
 550:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState  = ES_NOK ;
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <=DIO_PIN7) && (Copy_u8Value <= OUTPUT)){
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	84 30       	cpi	r24, 0x04	; 4
 55a:	08 f0       	brcs	.+2      	; 0x55e <DIO_enuSetPinValue+0x20>
 55c:	d0 c0       	rjmp	.+416    	; 0x6fe <DIO_enuSetPinValue+0x1c0>
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	88 30       	cpi	r24, 0x08	; 8
 562:	08 f0       	brcs	.+2      	; 0x566 <DIO_enuSetPinValue+0x28>
 564:	cc c0       	rjmp	.+408    	; 0x6fe <DIO_enuSetPinValue+0x1c0>
 566:	8c 81       	ldd	r24, Y+4	; 0x04
 568:	82 30       	cpi	r24, 0x02	; 2
 56a:	08 f0       	brcs	.+2      	; 0x56e <DIO_enuSetPinValue+0x30>
 56c:	c8 c0       	rjmp	.+400    	; 0x6fe <DIO_enuSetPinValue+0x1c0>
			switch(Copy_u8PortID){
 56e:	8a 81       	ldd	r24, Y+2	; 0x02
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	3e 83       	std	Y+6, r19	; 0x06
 576:	2d 83       	std	Y+5, r18	; 0x05
 578:	6d 81       	ldd	r22, Y+5	; 0x05
 57a:	7e 81       	ldd	r23, Y+6	; 0x06
 57c:	61 30       	cpi	r22, 0x01	; 1
 57e:	71 05       	cpc	r23, r1
 580:	09 f4       	brne	.+2      	; 0x584 <DIO_enuSetPinValue+0x46>
 582:	41 c0       	rjmp	.+130    	; 0x606 <DIO_enuSetPinValue+0xc8>
 584:	8d 81       	ldd	r24, Y+5	; 0x05
 586:	9e 81       	ldd	r25, Y+6	; 0x06
 588:	82 30       	cpi	r24, 0x02	; 2
 58a:	91 05       	cpc	r25, r1
 58c:	34 f4       	brge	.+12     	; 0x59a <DIO_enuSetPinValue+0x5c>
 58e:	2d 81       	ldd	r18, Y+5	; 0x05
 590:	3e 81       	ldd	r19, Y+6	; 0x06
 592:	21 15       	cp	r18, r1
 594:	31 05       	cpc	r19, r1
 596:	71 f0       	breq	.+28     	; 0x5b4 <DIO_enuSetPinValue+0x76>
 598:	b0 c0       	rjmp	.+352    	; 0x6fa <DIO_enuSetPinValue+0x1bc>
 59a:	6d 81       	ldd	r22, Y+5	; 0x05
 59c:	7e 81       	ldd	r23, Y+6	; 0x06
 59e:	62 30       	cpi	r22, 0x02	; 2
 5a0:	71 05       	cpc	r23, r1
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <DIO_enuSetPinValue+0x68>
 5a4:	59 c0       	rjmp	.+178    	; 0x658 <DIO_enuSetPinValue+0x11a>
 5a6:	8d 81       	ldd	r24, Y+5	; 0x05
 5a8:	9e 81       	ldd	r25, Y+6	; 0x06
 5aa:	83 30       	cpi	r24, 0x03	; 3
 5ac:	91 05       	cpc	r25, r1
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <DIO_enuSetPinValue+0x74>
 5b0:	7c c0       	rjmp	.+248    	; 0x6aa <DIO_enuSetPinValue+0x16c>
 5b2:	a3 c0       	rjmp	.+326    	; 0x6fa <DIO_enuSetPinValue+0x1bc>
			case DIO_PORTA:
				PORTA &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 5b4:	ab e3       	ldi	r26, 0x3B	; 59
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	eb e3       	ldi	r30, 0x3B	; 59
 5ba:	f0 e0       	ldi	r31, 0x00	; 0
 5bc:	80 81       	ld	r24, Z
 5be:	48 2f       	mov	r20, r24
 5c0:	8b 81       	ldd	r24, Y+3	; 0x03
 5c2:	28 2f       	mov	r18, r24
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_enuSetPinValue+0x92>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	2a 95       	dec	r18
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_enuSetPinValue+0x8e>
 5d4:	80 95       	com	r24
 5d6:	84 23       	and	r24, r20
 5d8:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value <<Copy_u8PinID);//set
 5da:	ab e3       	ldi	r26, 0x3B	; 59
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	eb e3       	ldi	r30, 0x3B	; 59
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	48 2f       	mov	r20, r24
 5e6:	8c 81       	ldd	r24, Y+4	; 0x04
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	88 2f       	mov	r24, r24
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	b9 01       	movw	r22, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_enuSetPinValue+0xbc>
 5f6:	66 0f       	add	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	8a 95       	dec	r24
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_enuSetPinValue+0xb8>
 5fe:	cb 01       	movw	r24, r22
 600:	84 2b       	or	r24, r20
 602:	8c 93       	st	X, r24
 604:	7a c0       	rjmp	.+244    	; 0x6fa <DIO_enuSetPinValue+0x1bc>
			break;
			case DIO_PORTB:
				PORTB &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 606:	a8 e3       	ldi	r26, 0x38	; 56
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e8 e3       	ldi	r30, 0x38	; 56
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	48 2f       	mov	r20, r24
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_enuSetPinValue+0xe4>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	2a 95       	dec	r18
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_enuSetPinValue+0xe0>
 626:	80 95       	com	r24
 628:	84 23       	and	r24, r20
 62a:	8c 93       	st	X, r24
				PORTB |=(Copy_u8Value <<Copy_u8PinID);//set
 62c:	a8 e3       	ldi	r26, 0x38	; 56
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	e8 e3       	ldi	r30, 0x38	; 56
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	48 2f       	mov	r20, r24
 638:	8c 81       	ldd	r24, Y+4	; 0x04
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	88 2f       	mov	r24, r24
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	b9 01       	movw	r22, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_enuSetPinValue+0x10e>
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	8a 95       	dec	r24
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_enuSetPinValue+0x10a>
 650:	cb 01       	movw	r24, r22
 652:	84 2b       	or	r24, r20
 654:	8c 93       	st	X, r24
 656:	51 c0       	rjmp	.+162    	; 0x6fa <DIO_enuSetPinValue+0x1bc>
			break;
			case DIO_PORTC:
				PORTC &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 658:	a5 e3       	ldi	r26, 0x35	; 53
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	e5 e3       	ldi	r30, 0x35	; 53
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	48 2f       	mov	r20, r24
 664:	8b 81       	ldd	r24, Y+3	; 0x03
 666:	28 2f       	mov	r18, r24
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_enuSetPinValue+0x136>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	2a 95       	dec	r18
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_enuSetPinValue+0x132>
 678:	80 95       	com	r24
 67a:	84 23       	and	r24, r20
 67c:	8c 93       	st	X, r24
				PORTC |=(Copy_u8Value <<Copy_u8PinID);//set
 67e:	a5 e3       	ldi	r26, 0x35	; 53
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	e5 e3       	ldi	r30, 0x35	; 53
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	80 81       	ld	r24, Z
 688:	48 2f       	mov	r20, r24
 68a:	8c 81       	ldd	r24, Y+4	; 0x04
 68c:	28 2f       	mov	r18, r24
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	88 2f       	mov	r24, r24
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	b9 01       	movw	r22, r18
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_enuSetPinValue+0x160>
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	8a 95       	dec	r24
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_enuSetPinValue+0x15c>
 6a2:	cb 01       	movw	r24, r22
 6a4:	84 2b       	or	r24, r20
 6a6:	8c 93       	st	X, r24
 6a8:	28 c0       	rjmp	.+80     	; 0x6fa <DIO_enuSetPinValue+0x1bc>
			break;
			case DIO_PORTD:
				PORTD &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 6aa:	a2 e3       	ldi	r26, 0x32	; 50
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
 6ae:	e2 e3       	ldi	r30, 0x32	; 50
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	48 2f       	mov	r20, r24
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	28 2f       	mov	r18, r24
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <DIO_enuSetPinValue+0x188>
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	2a 95       	dec	r18
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <DIO_enuSetPinValue+0x184>
 6ca:	80 95       	com	r24
 6cc:	84 23       	and	r24, r20
 6ce:	8c 93       	st	X, r24
				PORTD |=(Copy_u8Value <<Copy_u8PinID);//set
 6d0:	a2 e3       	ldi	r26, 0x32	; 50
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	e2 e3       	ldi	r30, 0x32	; 50
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	48 2f       	mov	r20, r24
 6dc:	8c 81       	ldd	r24, Y+4	; 0x04
 6de:	28 2f       	mov	r18, r24
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	8b 81       	ldd	r24, Y+3	; 0x03
 6e4:	88 2f       	mov	r24, r24
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	b9 01       	movw	r22, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_enuSetPinValue+0x1b2>
 6ec:	66 0f       	add	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	8a 95       	dec	r24
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_enuSetPinValue+0x1ae>
 6f4:	cb 01       	movw	r24, r22
 6f6:	84 2b       	or	r24, r20
 6f8:	8c 93       	st	X, r24
			break;
			}
			Local_enuErrorState = ES_OK;
 6fa:	19 82       	std	Y+1, r1	; 0x01
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_enuSetPinValue+0x1c4>
		}
		else{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 6fe:	83 e0       	ldi	r24, 0x03	; 3
 700:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
 702:	89 81       	ldd	r24, Y+1	; 0x01
}
 704:	26 96       	adiw	r28, 0x06	; 6
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <DIO_enuTogPinValue>:
ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID){
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	00 d0       	rcall	.+0      	; 0x71c <DIO_enuTogPinValue+0x6>
 71c:	00 d0       	rcall	.+0      	; 0x71e <DIO_enuTogPinValue+0x8>
 71e:	0f 92       	push	r0
 720:	cd b7       	in	r28, 0x3d	; 61
 722:	de b7       	in	r29, 0x3e	; 62
 724:	8a 83       	std	Y+2, r24	; 0x02
 726:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK ;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <=DIO_PIN7)){
 72c:	8a 81       	ldd	r24, Y+2	; 0x02
 72e:	84 30       	cpi	r24, 0x04	; 4
 730:	08 f0       	brcs	.+2      	; 0x734 <DIO_enuTogPinValue+0x1e>
 732:	74 c0       	rjmp	.+232    	; 0x81c <DIO_enuTogPinValue+0x106>
 734:	8b 81       	ldd	r24, Y+3	; 0x03
 736:	88 30       	cpi	r24, 0x08	; 8
 738:	08 f0       	brcs	.+2      	; 0x73c <DIO_enuTogPinValue+0x26>
 73a:	70 c0       	rjmp	.+224    	; 0x81c <DIO_enuTogPinValue+0x106>
			switch(Copy_u8PortID){
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	28 2f       	mov	r18, r24
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	3d 83       	std	Y+5, r19	; 0x05
 744:	2c 83       	std	Y+4, r18	; 0x04
 746:	8c 81       	ldd	r24, Y+4	; 0x04
 748:	9d 81       	ldd	r25, Y+5	; 0x05
 74a:	81 30       	cpi	r24, 0x01	; 1
 74c:	91 05       	cpc	r25, r1
 74e:	49 f1       	breq	.+82     	; 0x7a2 <DIO_enuTogPinValue+0x8c>
 750:	2c 81       	ldd	r18, Y+4	; 0x04
 752:	3d 81       	ldd	r19, Y+5	; 0x05
 754:	22 30       	cpi	r18, 0x02	; 2
 756:	31 05       	cpc	r19, r1
 758:	2c f4       	brge	.+10     	; 0x764 <DIO_enuTogPinValue+0x4e>
 75a:	8c 81       	ldd	r24, Y+4	; 0x04
 75c:	9d 81       	ldd	r25, Y+5	; 0x05
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	61 f0       	breq	.+24     	; 0x77a <DIO_enuTogPinValue+0x64>
 762:	5a c0       	rjmp	.+180    	; 0x818 <DIO_enuTogPinValue+0x102>
 764:	2c 81       	ldd	r18, Y+4	; 0x04
 766:	3d 81       	ldd	r19, Y+5	; 0x05
 768:	22 30       	cpi	r18, 0x02	; 2
 76a:	31 05       	cpc	r19, r1
 76c:	71 f1       	breq	.+92     	; 0x7ca <DIO_enuTogPinValue+0xb4>
 76e:	8c 81       	ldd	r24, Y+4	; 0x04
 770:	9d 81       	ldd	r25, Y+5	; 0x05
 772:	83 30       	cpi	r24, 0x03	; 3
 774:	91 05       	cpc	r25, r1
 776:	e9 f1       	breq	.+122    	; 0x7f2 <DIO_enuTogPinValue+0xdc>
 778:	4f c0       	rjmp	.+158    	; 0x818 <DIO_enuTogPinValue+0x102>
			case DIO_PORTA:
				PORTA ^=(DIO_MASK_BIT <<Copy_u8PinID);
 77a:	ab e3       	ldi	r26, 0x3B	; 59
 77c:	b0 e0       	ldi	r27, 0x00	; 0
 77e:	eb e3       	ldi	r30, 0x3B	; 59
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	48 2f       	mov	r20, r24
 786:	8b 81       	ldd	r24, Y+3	; 0x03
 788:	28 2f       	mov	r18, r24
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	02 2e       	mov	r0, r18
 792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_enuTogPinValue+0x82>
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	0a 94       	dec	r0
 79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_enuTogPinValue+0x7e>
 79c:	84 27       	eor	r24, r20
 79e:	8c 93       	st	X, r24
 7a0:	3b c0       	rjmp	.+118    	; 0x818 <DIO_enuTogPinValue+0x102>
			break;
			case DIO_PORTB:
				PORTB ^=(DIO_MASK_BIT <<Copy_u8PinID);
 7a2:	a8 e3       	ldi	r26, 0x38	; 56
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	e8 e3       	ldi	r30, 0x38	; 56
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	48 2f       	mov	r20, r24
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	28 2f       	mov	r18, r24
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	02 2e       	mov	r0, r18
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_enuTogPinValue+0xaa>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	0a 94       	dec	r0
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_enuTogPinValue+0xa6>
 7c4:	84 27       	eor	r24, r20
 7c6:	8c 93       	st	X, r24
 7c8:	27 c0       	rjmp	.+78     	; 0x818 <DIO_enuTogPinValue+0x102>
			break;
			case DIO_PORTC:
				PORTC ^=(DIO_MASK_BIT <<Copy_u8PinID);
 7ca:	a5 e3       	ldi	r26, 0x35	; 53
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	e5 e3       	ldi	r30, 0x35	; 53
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	48 2f       	mov	r20, r24
 7d6:	8b 81       	ldd	r24, Y+3	; 0x03
 7d8:	28 2f       	mov	r18, r24
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	02 2e       	mov	r0, r18
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_enuTogPinValue+0xd2>
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	0a 94       	dec	r0
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_enuTogPinValue+0xce>
 7ec:	84 27       	eor	r24, r20
 7ee:	8c 93       	st	X, r24
 7f0:	13 c0       	rjmp	.+38     	; 0x818 <DIO_enuTogPinValue+0x102>
			break;
			case DIO_PORTD:
				PORTD ^=(DIO_MASK_BIT <<Copy_u8PinID);
 7f2:	a2 e3       	ldi	r26, 0x32	; 50
 7f4:	b0 e0       	ldi	r27, 0x00	; 0
 7f6:	e2 e3       	ldi	r30, 0x32	; 50
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	48 2f       	mov	r20, r24
 7fe:	8b 81       	ldd	r24, Y+3	; 0x03
 800:	28 2f       	mov	r18, r24
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 2e       	mov	r0, r18
 80a:	02 c0       	rjmp	.+4      	; 0x810 <DIO_enuTogPinValue+0xfa>
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	0a 94       	dec	r0
 812:	e2 f7       	brpl	.-8      	; 0x80c <DIO_enuTogPinValue+0xf6>
 814:	84 27       	eor	r24, r20
 816:	8c 93       	st	X, r24
			break;
			}
			Local_enuErrorState = ES_OK;
 818:	19 82       	std	Y+1, r1	; 0x01
 81a:	02 c0       	rjmp	.+4      	; 0x820 <DIO_enuTogPinValue+0x10a>
		}
		else{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 81c:	83 e0       	ldi	r24, 0x03	; 3
 81e:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
 820:	89 81       	ldd	r24, Y+1	; 0x01
}
 822:	0f 90       	pop	r0
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	cf 91       	pop	r28
 82e:	df 91       	pop	r29
 830:	08 95       	ret

00000832 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 * Copy_pu8Value , u8 Copy_u8PinID){
 832:	df 93       	push	r29
 834:	cf 93       	push	r28
 836:	cd b7       	in	r28, 0x3d	; 61
 838:	de b7       	in	r29, 0x3e	; 62
 83a:	27 97       	sbiw	r28, 0x07	; 7
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	f8 94       	cli
 840:	de bf       	out	0x3e, r29	; 62
 842:	0f be       	out	0x3f, r0	; 63
 844:	cd bf       	out	0x3d, r28	; 61
 846:	8a 83       	std	Y+2, r24	; 0x02
 848:	7c 83       	std	Y+4, r23	; 0x04
 84a:	6b 83       	std	Y+3, r22	; 0x03
 84c:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState  = ES_NOK ;
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL){
 852:	8b 81       	ldd	r24, Y+3	; 0x03
 854:	9c 81       	ldd	r25, Y+4	; 0x04
 856:	00 97       	sbiw	r24, 0x00	; 0
 858:	09 f4       	brne	.+2      	; 0x85c <DIO_enuGetPinValue+0x2a>
 85a:	7d c0       	rjmp	.+250    	; 0x956 <__stack+0xf7>
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <=DIO_PIN7)){
 85c:	8a 81       	ldd	r24, Y+2	; 0x02
 85e:	84 30       	cpi	r24, 0x04	; 4
 860:	08 f0       	brcs	.+2      	; 0x864 <__stack+0x5>
 862:	76 c0       	rjmp	.+236    	; 0x950 <__stack+0xf1>
 864:	8d 81       	ldd	r24, Y+5	; 0x05
 866:	88 30       	cpi	r24, 0x08	; 8
 868:	08 f0       	brcs	.+2      	; 0x86c <__stack+0xd>
 86a:	72 c0       	rjmp	.+228    	; 0x950 <__stack+0xf1>
			switch(Copy_u8PortID)
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	3f 83       	std	Y+7, r19	; 0x07
 874:	2e 83       	std	Y+6, r18	; 0x06
 876:	4e 81       	ldd	r20, Y+6	; 0x06
 878:	5f 81       	ldd	r21, Y+7	; 0x07
 87a:	41 30       	cpi	r20, 0x01	; 1
 87c:	51 05       	cpc	r21, r1
 87e:	59 f1       	breq	.+86     	; 0x8d6 <__stack+0x77>
 880:	8e 81       	ldd	r24, Y+6	; 0x06
 882:	9f 81       	ldd	r25, Y+7	; 0x07
 884:	82 30       	cpi	r24, 0x02	; 2
 886:	91 05       	cpc	r25, r1
 888:	34 f4       	brge	.+12     	; 0x896 <__stack+0x37>
 88a:	2e 81       	ldd	r18, Y+6	; 0x06
 88c:	3f 81       	ldd	r19, Y+7	; 0x07
 88e:	21 15       	cp	r18, r1
 890:	31 05       	cpc	r19, r1
 892:	69 f0       	breq	.+26     	; 0x8ae <__stack+0x4f>
 894:	5b c0       	rjmp	.+182    	; 0x94c <__stack+0xed>
 896:	4e 81       	ldd	r20, Y+6	; 0x06
 898:	5f 81       	ldd	r21, Y+7	; 0x07
 89a:	42 30       	cpi	r20, 0x02	; 2
 89c:	51 05       	cpc	r21, r1
 89e:	79 f1       	breq	.+94     	; 0x8fe <__stack+0x9f>
 8a0:	8e 81       	ldd	r24, Y+6	; 0x06
 8a2:	9f 81       	ldd	r25, Y+7	; 0x07
 8a4:	83 30       	cpi	r24, 0x03	; 3
 8a6:	91 05       	cpc	r25, r1
 8a8:	09 f4       	brne	.+2      	; 0x8ac <__stack+0x4d>
 8aa:	3d c0       	rjmp	.+122    	; 0x926 <__stack+0xc7>
 8ac:	4f c0       	rjmp	.+158    	; 0x94c <__stack+0xed>
			{
			case DIO_PORTA :
				 * Copy_pu8Value = ((PINA>>Copy_u8PinID)&1);
 8ae:	e9 e3       	ldi	r30, 0x39	; 57
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	28 2f       	mov	r18, r24
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	8d 81       	ldd	r24, Y+5	; 0x05
 8ba:	88 2f       	mov	r24, r24
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	a9 01       	movw	r20, r18
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
 8c2:	55 95       	asr	r21
 8c4:	47 95       	ror	r20
 8c6:	8a 95       	dec	r24
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
 8ca:	ca 01       	movw	r24, r20
 8cc:	81 70       	andi	r24, 0x01	; 1
 8ce:	eb 81       	ldd	r30, Y+3	; 0x03
 8d0:	fc 81       	ldd	r31, Y+4	; 0x04
 8d2:	80 83       	st	Z, r24
 8d4:	3b c0       	rjmp	.+118    	; 0x94c <__stack+0xed>
			break;
			case DIO_PORTB :
			     * Copy_pu8Value = ((PINA>>Copy_u8PinID)&1);
 8d6:	e9 e3       	ldi	r30, 0x39	; 57
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	28 2f       	mov	r18, r24
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	8d 81       	ldd	r24, Y+5	; 0x05
 8e2:	88 2f       	mov	r24, r24
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	a9 01       	movw	r20, r18
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	55 95       	asr	r21
 8ec:	47 95       	ror	r20
 8ee:	8a 95       	dec	r24
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	ca 01       	movw	r24, r20
 8f4:	81 70       	andi	r24, 0x01	; 1
 8f6:	eb 81       	ldd	r30, Y+3	; 0x03
 8f8:	fc 81       	ldd	r31, Y+4	; 0x04
 8fa:	80 83       	st	Z, r24
 8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
			break;
			case DIO_PORTC :
				* Copy_pu8Value =  ((PINA>>Copy_u8PinID)&1) ;
 8fe:	e9 e3       	ldi	r30, 0x39	; 57
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 81       	ld	r24, Z
 904:	28 2f       	mov	r18, r24
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	8d 81       	ldd	r24, Y+5	; 0x05
 90a:	88 2f       	mov	r24, r24
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	a9 01       	movw	r20, r18
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0xb7>
 912:	55 95       	asr	r21
 914:	47 95       	ror	r20
 916:	8a 95       	dec	r24
 918:	e2 f7       	brpl	.-8      	; 0x912 <__stack+0xb3>
 91a:	ca 01       	movw	r24, r20
 91c:	81 70       	andi	r24, 0x01	; 1
 91e:	eb 81       	ldd	r30, Y+3	; 0x03
 920:	fc 81       	ldd	r31, Y+4	; 0x04
 922:	80 83       	st	Z, r24
 924:	13 c0       	rjmp	.+38     	; 0x94c <__stack+0xed>
			break;
			case DIO_PORTD :
				 * Copy_pu8Value = ((PINA>>Copy_u8PinID)&1) ;
 926:	e9 e3       	ldi	r30, 0x39	; 57
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	28 2f       	mov	r18, r24
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	8d 81       	ldd	r24, Y+5	; 0x05
 932:	88 2f       	mov	r24, r24
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	a9 01       	movw	r20, r18
 938:	02 c0       	rjmp	.+4      	; 0x93e <__stack+0xdf>
 93a:	55 95       	asr	r21
 93c:	47 95       	ror	r20
 93e:	8a 95       	dec	r24
 940:	e2 f7       	brpl	.-8      	; 0x93a <__stack+0xdb>
 942:	ca 01       	movw	r24, r20
 944:	81 70       	andi	r24, 0x01	; 1
 946:	eb 81       	ldd	r30, Y+3	; 0x03
 948:	fc 81       	ldd	r31, Y+4	; 0x04
 94a:	80 83       	st	Z, r24
			break;
			}
				 Local_enuErrorState = ES_OK;
 94c:	19 82       	std	Y+1, r1	; 0x01
 94e:	05 c0       	rjmp	.+10     	; 0x95a <__stack+0xfb>
			}
		else {
				 Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 950:	83 e0       	ldi	r24, 0x03	; 3
 952:	89 83       	std	Y+1, r24	; 0x01
 954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
		}
	}
	else{
		 Local_enuErrorState = ES_NULL_POINTER;
 956:	82 e0       	ldi	r24, 0x02	; 2
 958:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 95a:	89 81       	ldd	r24, Y+1	; 0x01
}
 95c:	27 96       	adiw	r28, 0x07	; 7
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	cf 91       	pop	r28
 96a:	df 91       	pop	r29
 96c:	08 95       	ret

0000096e <main>:

#include "stdTypes.h"
#include "errorStates.h"
#include "DIO_int.h"

int main(void){
 96e:	df 93       	push	r29
 970:	cf 93       	push	r28
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62

	DIO_enuInit();
 976:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_enuInit>

	return 0;
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	90 e0       	ldi	r25, 0x00	; 0
}
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
