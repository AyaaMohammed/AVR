
Switch_LT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b06  00000b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000ed0  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000063d  00000000  00000000  00001a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5e 05 	call	0xabc	; 0xabc <main>
  7a:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuInit>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	19 82       	std	Y+1, r1	; 0x01
  8e:	ea e3       	ldi	r30, 0x3A	; 58
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	80 83       	st	Z, r24
  96:	e7 e3       	ldi	r30, 0x37	; 55
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	80 83       	st	Z, r24
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8a e9       	ldi	r24, 0x9A	; 154
  a4:	80 83       	st	Z, r24
  a6:	e1 e3       	ldi	r30, 0x31	; 49
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	82 e9       	ldi	r24, 0x92	; 146
  ac:	80 83       	st	Z, r24
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	e8 e3       	ldi	r30, 0x38	; 56
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
  ba:	e5 e3       	ldi	r30, 0x35	; 53
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	89 e9       	ldi	r24, 0x99	; 153
  c0:	80 83       	st	Z, r24
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	89 83       	std	Y+1, r24	; 0x01
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	08 95       	ret

000000d0 <DIO_enuSetPortDirection>:
//	PORTD =  CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
	Local_enuErrorState  = ES_OK;
	return Local_enuErrorState;
}

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value){
  d0:	df 93       	push	r29
  d2:	cf 93       	push	r28
  d4:	00 d0       	rcall	.+0      	; 0xd6 <DIO_enuSetPortDirection+0x6>
  d6:	00 d0       	rcall	.+0      	; 0xd8 <DIO_enuSetPortDirection+0x8>
  d8:	0f 92       	push	r0
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	8a 83       	std	Y+2, r24	; 0x02
  e0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK ;
  e2:	19 82       	std	Y+1, r1	; 0x01
     if(Copy_u8PortID <= DIO_PORTD){
  e4:	8a 81       	ldd	r24, Y+2	; 0x02
  e6:	84 30       	cpi	r24, 0x04	; 4
  e8:	a8 f5       	brcc	.+106    	; 0x154 <DIO_enuSetPortDirection+0x84>
    	 switch(Copy_u8PortID)
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	28 2f       	mov	r18, r24
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	3d 83       	std	Y+5, r19	; 0x05
  f2:	2c 83       	std	Y+4, r18	; 0x04
  f4:	8c 81       	ldd	r24, Y+4	; 0x04
  f6:	9d 81       	ldd	r25, Y+5	; 0x05
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 05       	cpc	r25, r1
  fc:	d1 f0       	breq	.+52     	; 0x132 <DIO_enuSetPortDirection+0x62>
  fe:	2c 81       	ldd	r18, Y+4	; 0x04
 100:	3d 81       	ldd	r19, Y+5	; 0x05
 102:	22 30       	cpi	r18, 0x02	; 2
 104:	31 05       	cpc	r19, r1
 106:	2c f4       	brge	.+10     	; 0x112 <DIO_enuSetPortDirection+0x42>
 108:	8c 81       	ldd	r24, Y+4	; 0x04
 10a:	9d 81       	ldd	r25, Y+5	; 0x05
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	61 f0       	breq	.+24     	; 0x128 <DIO_enuSetPortDirection+0x58>
 110:	1e c0       	rjmp	.+60     	; 0x14e <DIO_enuSetPortDirection+0x7e>
 112:	2c 81       	ldd	r18, Y+4	; 0x04
 114:	3d 81       	ldd	r19, Y+5	; 0x05
 116:	22 30       	cpi	r18, 0x02	; 2
 118:	31 05       	cpc	r19, r1
 11a:	81 f0       	breq	.+32     	; 0x13c <DIO_enuSetPortDirection+0x6c>
 11c:	8c 81       	ldd	r24, Y+4	; 0x04
 11e:	9d 81       	ldd	r25, Y+5	; 0x05
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	91 05       	cpc	r25, r1
 124:	81 f0       	breq	.+32     	; 0x146 <DIO_enuSetPortDirection+0x76>
 126:	13 c0       	rjmp	.+38     	; 0x14e <DIO_enuSetPortDirection+0x7e>
    	 {
    	 case DIO_PORTA :
    		 DDRA = Copy_u8Value;
 128:	ea e3       	ldi	r30, 0x3A	; 58
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	80 83       	st	Z, r24
 130:	0e c0       	rjmp	.+28     	; 0x14e <DIO_enuSetPortDirection+0x7e>
    		 break;
    	 case DIO_PORTB :
    	     DDRB = Copy_u8Value;
 132:	e7 e3       	ldi	r30, 0x37	; 55
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	80 83       	st	Z, r24
 13a:	09 c0       	rjmp	.+18     	; 0x14e <DIO_enuSetPortDirection+0x7e>
    	     break;
    	 case DIO_PORTC :
    	     DDRC = Copy_u8Value;
 13c:	e4 e3       	ldi	r30, 0x34	; 52
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	80 83       	st	Z, r24
 144:	04 c0       	rjmp	.+8      	; 0x14e <DIO_enuSetPortDirection+0x7e>
    	     break;
    	 case DIO_PORTD :
    	     DDRD = Copy_u8Value;
 146:	e1 e3       	ldi	r30, 0x31	; 49
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	80 83       	st	Z, r24
    	     break;
    	 }
    	 Local_enuErrorState = ES_OK;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_enuSetPortDirection+0x88>
     }
     else{
    	 Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	89 83       	std	Y+1, r24	; 0x01
     }

	return Local_enuErrorState;
 158:	89 81       	ldd	r24, Y+1	; 0x01
}
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <DIO_enuSetValue>:
ES_t DIO_enuSetValue(u8 Copy_u8PortID , u8 Copy_u8Value){
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	00 d0       	rcall	.+0      	; 0x170 <DIO_enuSetValue+0x6>
 170:	00 d0       	rcall	.+0      	; 0x172 <DIO_enuSetValue+0x8>
 172:	0f 92       	push	r0
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	8a 83       	std	Y+2, r24	; 0x02
 17a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK ;
 17c:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_u8PortID <= DIO_PORTD){
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	a8 f5       	brcc	.+106    	; 0x1ee <DIO_enuSetValue+0x84>
	    	 switch(Copy_u8PortID)
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	3d 83       	std	Y+5, r19	; 0x05
 18c:	2c 83       	std	Y+4, r18	; 0x04
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	d1 f0       	breq	.+52     	; 0x1cc <DIO_enuSetValue+0x62>
 198:	2c 81       	ldd	r18, Y+4	; 0x04
 19a:	3d 81       	ldd	r19, Y+5	; 0x05
 19c:	22 30       	cpi	r18, 0x02	; 2
 19e:	31 05       	cpc	r19, r1
 1a0:	2c f4       	brge	.+10     	; 0x1ac <DIO_enuSetValue+0x42>
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	9d 81       	ldd	r25, Y+5	; 0x05
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	61 f0       	breq	.+24     	; 0x1c2 <DIO_enuSetValue+0x58>
 1aa:	1e c0       	rjmp	.+60     	; 0x1e8 <DIO_enuSetValue+0x7e>
 1ac:	2c 81       	ldd	r18, Y+4	; 0x04
 1ae:	3d 81       	ldd	r19, Y+5	; 0x05
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	81 f0       	breq	.+32     	; 0x1d6 <DIO_enuSetValue+0x6c>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	91 05       	cpc	r25, r1
 1be:	81 f0       	breq	.+32     	; 0x1e0 <DIO_enuSetValue+0x76>
 1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <DIO_enuSetValue+0x7e>
	    	 {
	    	 case DIO_PORTA :
	    		 PORTA = Copy_u8Value;
 1c2:	eb e3       	ldi	r30, 0x3B	; 59
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	80 83       	st	Z, r24
 1ca:	0e c0       	rjmp	.+28     	; 0x1e8 <DIO_enuSetValue+0x7e>
	    		 break;
	    	 case DIO_PORTB :
	    	     PORTB = Copy_u8Value;
 1cc:	e8 e3       	ldi	r30, 0x38	; 56
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	80 83       	st	Z, r24
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <DIO_enuSetValue+0x7e>
	    	     break;
	    	 case DIO_PORTC :
	    	     PORTC = Copy_u8Value;
 1d6:	e5 e3       	ldi	r30, 0x35	; 53
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	80 83       	st	Z, r24
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <DIO_enuSetValue+0x7e>
	    	     break;
	    	 case DIO_PORTD :
	    	     PORTD = Copy_u8Value;
 1e0:	e2 e3       	ldi	r30, 0x32	; 50
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	80 83       	st	Z, r24
	    	     break;
	    	 }
	    	 Local_enuErrorState = ES_OK;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_enuSetValue+0x88>
	     }
	     else{
	    	 Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	89 83       	std	Y+1, r24	; 0x01
	     }
	return Local_enuErrorState;
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
}
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	cf 91       	pop	r28
 200:	df 91       	pop	r29
 202:	08 95       	ret

00000204 <DIO_enuTogPortValue>:
ES_t DIO_enuTogPortValue(u8 Copy_u8PortID){
 204:	df 93       	push	r29
 206:	cf 93       	push	r28
 208:	00 d0       	rcall	.+0      	; 0x20a <DIO_enuTogPortValue+0x6>
 20a:	00 d0       	rcall	.+0      	; 0x20c <DIO_enuTogPortValue+0x8>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState  = ES_NOK ;
 212:	19 82       	std	Y+1, r1	; 0x01
	 if(Copy_u8PortID <= DIO_PORTD){
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	84 30       	cpi	r24, 0x04	; 4
 218:	08 f0       	brcs	.+2      	; 0x21c <DIO_enuTogPortValue+0x18>
 21a:	41 c0       	rjmp	.+130    	; 0x29e <DIO_enuTogPortValue+0x9a>
	    	 switch(Copy_u8PortID)
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	3c 83       	std	Y+4, r19	; 0x04
 224:	2b 83       	std	Y+3, r18	; 0x03
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	91 05       	cpc	r25, r1
 22e:	e9 f0       	breq	.+58     	; 0x26a <DIO_enuTogPortValue+0x66>
 230:	2b 81       	ldd	r18, Y+3	; 0x03
 232:	3c 81       	ldd	r19, Y+4	; 0x04
 234:	22 30       	cpi	r18, 0x02	; 2
 236:	31 05       	cpc	r19, r1
 238:	2c f4       	brge	.+10     	; 0x244 <DIO_enuTogPortValue+0x40>
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	9c 81       	ldd	r25, Y+4	; 0x04
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	61 f0       	breq	.+24     	; 0x25a <DIO_enuTogPortValue+0x56>
 242:	2a c0       	rjmp	.+84     	; 0x298 <DIO_enuTogPortValue+0x94>
 244:	2b 81       	ldd	r18, Y+3	; 0x03
 246:	3c 81       	ldd	r19, Y+4	; 0x04
 248:	22 30       	cpi	r18, 0x02	; 2
 24a:	31 05       	cpc	r19, r1
 24c:	b1 f0       	breq	.+44     	; 0x27a <DIO_enuTogPortValue+0x76>
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	9c 81       	ldd	r25, Y+4	; 0x04
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	91 05       	cpc	r25, r1
 256:	c9 f0       	breq	.+50     	; 0x28a <DIO_enuTogPortValue+0x86>
 258:	1f c0       	rjmp	.+62     	; 0x298 <DIO_enuTogPortValue+0x94>
	    	 {
	    	 case DIO_PORTA :
	    		 PORTA = ~PORTA;
 25a:	ab e3       	ldi	r26, 0x3B	; 59
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	eb e3       	ldi	r30, 0x3B	; 59
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 95       	com	r24
 266:	8c 93       	st	X, r24
 268:	17 c0       	rjmp	.+46     	; 0x298 <DIO_enuTogPortValue+0x94>
	    		 break;
	    	 case DIO_PORTB :
	    		 PORTB = ~PORTB;
 26a:	a8 e3       	ldi	r26, 0x38	; 56
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e8 e3       	ldi	r30, 0x38	; 56
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 95       	com	r24
 276:	8c 93       	st	X, r24
 278:	0f c0       	rjmp	.+30     	; 0x298 <DIO_enuTogPortValue+0x94>
	    	     break;
	    	 case DIO_PORTC :
	    		 PORTC = ~PORTC;
 27a:	a5 e3       	ldi	r26, 0x35	; 53
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	e5 e3       	ldi	r30, 0x35	; 53
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	80 95       	com	r24
 286:	8c 93       	st	X, r24
 288:	07 c0       	rjmp	.+14     	; 0x298 <DIO_enuTogPortValue+0x94>
	    	     break;
	    	 case DIO_PORTD :
	    		 PORTD = ~PORTD;
 28a:	a2 e3       	ldi	r26, 0x32	; 50
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	e2 e3       	ldi	r30, 0x32	; 50
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	80 95       	com	r24
 296:	8c 93       	st	X, r24
	    	     break;
	    	 }
	    	 Local_enuErrorState = ES_OK;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_enuTogPortValue+0x9e>
	     }
	     else{
	    	 Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	89 83       	std	Y+1, r24	; 0x01
	     }
	return Local_enuErrorState;
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2a4:	0f 90       	pop	r0
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	cf 91       	pop	r28
 2ae:	df 91       	pop	r29
 2b0:	08 95       	ret

000002b2 <DIO_enuGetPortValue>:
ES_t DIO_enuGetPortValue(u8 Copy_u8PortID ,u8 * Copy_pu8Value){
 2b2:	df 93       	push	r29
 2b4:	cf 93       	push	r28
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <DIO_enuGetPortValue+0x6>
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <DIO_enuGetPortValue+0x8>
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <DIO_enuGetPortValue+0xa>
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	8a 83       	std	Y+2, r24	; 0x02
 2c2:	7c 83       	std	Y+4, r23	; 0x04
 2c4:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK ;
 2c6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL){
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	9c 81       	ldd	r25, Y+4	; 0x04
 2cc:	00 97       	sbiw	r24, 0x00	; 0
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <DIO_enuGetPortValue+0x20>
 2d0:	43 c0       	rjmp	.+134    	; 0x358 <DIO_enuGetPortValue+0xa6>
			 if(Copy_u8PortID <= DIO_PORTD){
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	84 30       	cpi	r24, 0x04	; 4
 2d6:	e8 f5       	brcc	.+122    	; 0x352 <DIO_enuGetPortValue+0xa0>
				     switch(Copy_u8PortID)
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	28 2f       	mov	r18, r24
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	3e 83       	std	Y+6, r19	; 0x06
 2e0:	2d 83       	std	Y+5, r18	; 0x05
 2e2:	8d 81       	ldd	r24, Y+5	; 0x05
 2e4:	9e 81       	ldd	r25, Y+6	; 0x06
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	91 05       	cpc	r25, r1
 2ea:	e1 f0       	breq	.+56     	; 0x324 <DIO_enuGetPortValue+0x72>
 2ec:	2d 81       	ldd	r18, Y+5	; 0x05
 2ee:	3e 81       	ldd	r19, Y+6	; 0x06
 2f0:	22 30       	cpi	r18, 0x02	; 2
 2f2:	31 05       	cpc	r19, r1
 2f4:	2c f4       	brge	.+10     	; 0x300 <DIO_enuGetPortValue+0x4e>
 2f6:	8d 81       	ldd	r24, Y+5	; 0x05
 2f8:	9e 81       	ldd	r25, Y+6	; 0x06
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	61 f0       	breq	.+24     	; 0x316 <DIO_enuGetPortValue+0x64>
 2fe:	26 c0       	rjmp	.+76     	; 0x34c <DIO_enuGetPortValue+0x9a>
 300:	2d 81       	ldd	r18, Y+5	; 0x05
 302:	3e 81       	ldd	r19, Y+6	; 0x06
 304:	22 30       	cpi	r18, 0x02	; 2
 306:	31 05       	cpc	r19, r1
 308:	a1 f0       	breq	.+40     	; 0x332 <DIO_enuGetPortValue+0x80>
 30a:	8d 81       	ldd	r24, Y+5	; 0x05
 30c:	9e 81       	ldd	r25, Y+6	; 0x06
 30e:	83 30       	cpi	r24, 0x03	; 3
 310:	91 05       	cpc	r25, r1
 312:	b1 f0       	breq	.+44     	; 0x340 <DIO_enuGetPortValue+0x8e>
 314:	1b c0       	rjmp	.+54     	; 0x34c <DIO_enuGetPortValue+0x9a>
				     {
				      case DIO_PORTA :
				    	  * Copy_pu8Value = PINA;
 316:	e9 e3       	ldi	r30, 0x39	; 57
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	eb 81       	ldd	r30, Y+3	; 0x03
 31e:	fc 81       	ldd	r31, Y+4	; 0x04
 320:	80 83       	st	Z, r24
 322:	14 c0       	rjmp	.+40     	; 0x34c <DIO_enuGetPortValue+0x9a>
				    	 break;
				      case DIO_PORTB :
				    	  * Copy_pu8Value = PINB;
 324:	e6 e3       	ldi	r30, 0x36	; 54
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	eb 81       	ldd	r30, Y+3	; 0x03
 32c:	fc 81       	ldd	r31, Y+4	; 0x04
 32e:	80 83       	st	Z, r24
 330:	0d c0       	rjmp	.+26     	; 0x34c <DIO_enuGetPortValue+0x9a>
				         break;
				      case DIO_PORTC :
				    	  * Copy_pu8Value = PINC;
 332:	e3 e3       	ldi	r30, 0x33	; 51
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	eb 81       	ldd	r30, Y+3	; 0x03
 33a:	fc 81       	ldd	r31, Y+4	; 0x04
 33c:	80 83       	st	Z, r24
 33e:	06 c0       	rjmp	.+12     	; 0x34c <DIO_enuGetPortValue+0x9a>
				    	 break;
				      case DIO_PORTD :
				    	  * Copy_pu8Value = PIND;
 340:	e0 e3       	ldi	r30, 0x30	; 48
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	eb 81       	ldd	r30, Y+3	; 0x03
 348:	fc 81       	ldd	r31, Y+4	; 0x04
 34a:	80 83       	st	Z, r24
				    	 break;
				       }
				    	 Local_enuErrorState = ES_OK;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	89 83       	std	Y+1, r24	; 0x01
 350:	05 c0       	rjmp	.+10     	; 0x35c <DIO_enuGetPortValue+0xaa>
				     }
			  else {
				    	Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_enuGetPortValue+0xaa>
				  }
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 35c:	89 81       	ldd	r24, Y+1	; 0x01
}
 35e:	26 96       	adiw	r28, 0x06	; 6
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	cf 91       	pop	r28
 36c:	df 91       	pop	r29
 36e:	08 95       	ret

00000370 <DIO_enuSetPinDirection>:
//pins
ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8Value ,u8 Copy_u8PinID){
 370:	df 93       	push	r29
 372:	cf 93       	push	r28
 374:	00 d0       	rcall	.+0      	; 0x376 <DIO_enuSetPinDirection+0x6>
 376:	00 d0       	rcall	.+0      	; 0x378 <DIO_enuSetPinDirection+0x8>
 378:	00 d0       	rcall	.+0      	; 0x37a <DIO_enuSetPinDirection+0xa>
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	8a 83       	std	Y+2, r24	; 0x02
 380:	6b 83       	std	Y+3, r22	; 0x03
 382:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState  = ES_NOK ;
 384:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <=DIO_PIN7) && (Copy_u8Value <= OUTPUT)){
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	84 30       	cpi	r24, 0x04	; 4
 38a:	08 f0       	brcs	.+2      	; 0x38e <DIO_enuSetPinDirection+0x1e>
 38c:	d1 c0       	rjmp	.+418    	; 0x530 <DIO_enuSetPinDirection+0x1c0>
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	88 30       	cpi	r24, 0x08	; 8
 392:	08 f0       	brcs	.+2      	; 0x396 <DIO_enuSetPinDirection+0x26>
 394:	cd c0       	rjmp	.+410    	; 0x530 <DIO_enuSetPinDirection+0x1c0>
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	82 30       	cpi	r24, 0x02	; 2
 39a:	08 f0       	brcs	.+2      	; 0x39e <DIO_enuSetPinDirection+0x2e>
 39c:	c9 c0       	rjmp	.+402    	; 0x530 <DIO_enuSetPinDirection+0x1c0>
		switch(Copy_u8PortID){
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	3e 83       	std	Y+6, r19	; 0x06
 3a6:	2d 83       	std	Y+5, r18	; 0x05
 3a8:	6d 81       	ldd	r22, Y+5	; 0x05
 3aa:	7e 81       	ldd	r23, Y+6	; 0x06
 3ac:	61 30       	cpi	r22, 0x01	; 1
 3ae:	71 05       	cpc	r23, r1
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <DIO_enuSetPinDirection+0x44>
 3b2:	41 c0       	rjmp	.+130    	; 0x436 <DIO_enuSetPinDirection+0xc6>
 3b4:	8d 81       	ldd	r24, Y+5	; 0x05
 3b6:	9e 81       	ldd	r25, Y+6	; 0x06
 3b8:	82 30       	cpi	r24, 0x02	; 2
 3ba:	91 05       	cpc	r25, r1
 3bc:	34 f4       	brge	.+12     	; 0x3ca <DIO_enuSetPinDirection+0x5a>
 3be:	2d 81       	ldd	r18, Y+5	; 0x05
 3c0:	3e 81       	ldd	r19, Y+6	; 0x06
 3c2:	21 15       	cp	r18, r1
 3c4:	31 05       	cpc	r19, r1
 3c6:	71 f0       	breq	.+28     	; 0x3e4 <DIO_enuSetPinDirection+0x74>
 3c8:	b0 c0       	rjmp	.+352    	; 0x52a <DIO_enuSetPinDirection+0x1ba>
 3ca:	6d 81       	ldd	r22, Y+5	; 0x05
 3cc:	7e 81       	ldd	r23, Y+6	; 0x06
 3ce:	62 30       	cpi	r22, 0x02	; 2
 3d0:	71 05       	cpc	r23, r1
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <DIO_enuSetPinDirection+0x66>
 3d4:	59 c0       	rjmp	.+178    	; 0x488 <DIO_enuSetPinDirection+0x118>
 3d6:	8d 81       	ldd	r24, Y+5	; 0x05
 3d8:	9e 81       	ldd	r25, Y+6	; 0x06
 3da:	83 30       	cpi	r24, 0x03	; 3
 3dc:	91 05       	cpc	r25, r1
 3de:	09 f4       	brne	.+2      	; 0x3e2 <DIO_enuSetPinDirection+0x72>
 3e0:	7c c0       	rjmp	.+248    	; 0x4da <DIO_enuSetPinDirection+0x16a>
 3e2:	a3 c0       	rjmp	.+326    	; 0x52a <DIO_enuSetPinDirection+0x1ba>
		case DIO_PORTA:
			DDRA &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 3e4:	aa e3       	ldi	r26, 0x3A	; 58
 3e6:	b0 e0       	ldi	r27, 0x00	; 0
 3e8:	ea e3       	ldi	r30, 0x3A	; 58
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	48 2f       	mov	r20, r24
 3f0:	8c 81       	ldd	r24, Y+4	; 0x04
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_enuSetPinDirection+0x90>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	2a 95       	dec	r18
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_enuSetPinDirection+0x8c>
 404:	80 95       	com	r24
 406:	84 23       	and	r24, r20
 408:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Value <<Copy_u8PinID);//set
 40a:	aa e3       	ldi	r26, 0x3A	; 58
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	ea e3       	ldi	r30, 0x3A	; 58
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	48 2f       	mov	r20, r24
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	28 2f       	mov	r18, r24
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	8c 81       	ldd	r24, Y+4	; 0x04
 41e:	88 2f       	mov	r24, r24
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_enuSetPinDirection+0xba>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	8a 95       	dec	r24
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_enuSetPinDirection+0xb6>
 42e:	cb 01       	movw	r24, r22
 430:	84 2b       	or	r24, r20
 432:	8c 93       	st	X, r24
 434:	7a c0       	rjmp	.+244    	; 0x52a <DIO_enuSetPinDirection+0x1ba>
		break;
		case DIO_PORTB:
			DDRB &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 436:	a7 e3       	ldi	r26, 0x37	; 55
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	e7 e3       	ldi	r30, 0x37	; 55
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	48 2f       	mov	r20, r24
 442:	8c 81       	ldd	r24, Y+4	; 0x04
 444:	28 2f       	mov	r18, r24
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_enuSetPinDirection+0xe2>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	2a 95       	dec	r18
 454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_enuSetPinDirection+0xde>
 456:	80 95       	com	r24
 458:	84 23       	and	r24, r20
 45a:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Value <<Copy_u8PinID);//set
 45c:	a7 e3       	ldi	r26, 0x37	; 55
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e7 e3       	ldi	r30, 0x37	; 55
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	48 2f       	mov	r20, r24
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	8c 81       	ldd	r24, Y+4	; 0x04
 470:	88 2f       	mov	r24, r24
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_enuSetPinDirection+0x10c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_enuSetPinDirection+0x108>
 480:	cb 01       	movw	r24, r22
 482:	84 2b       	or	r24, r20
 484:	8c 93       	st	X, r24
 486:	51 c0       	rjmp	.+162    	; 0x52a <DIO_enuSetPinDirection+0x1ba>
		break;
		case DIO_PORTC:
			DDRC &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 488:	a4 e3       	ldi	r26, 0x34	; 52
 48a:	b0 e0       	ldi	r27, 0x00	; 0
 48c:	e4 e3       	ldi	r30, 0x34	; 52
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	48 2f       	mov	r20, r24
 494:	8c 81       	ldd	r24, Y+4	; 0x04
 496:	28 2f       	mov	r18, r24
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_enuSetPinDirection+0x134>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	2a 95       	dec	r18
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_enuSetPinDirection+0x130>
 4a8:	80 95       	com	r24
 4aa:	84 23       	and	r24, r20
 4ac:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Value <<Copy_u8PinID);//set
 4ae:	a4 e3       	ldi	r26, 0x34	; 52
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	e4 e3       	ldi	r30, 0x34	; 52
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	48 2f       	mov	r20, r24
 4ba:	8b 81       	ldd	r24, Y+3	; 0x03
 4bc:	28 2f       	mov	r18, r24
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	8c 81       	ldd	r24, Y+4	; 0x04
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	b9 01       	movw	r22, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_enuSetPinDirection+0x15e>
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	8a 95       	dec	r24
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_enuSetPinDirection+0x15a>
 4d2:	cb 01       	movw	r24, r22
 4d4:	84 2b       	or	r24, r20
 4d6:	8c 93       	st	X, r24
 4d8:	28 c0       	rjmp	.+80     	; 0x52a <DIO_enuSetPinDirection+0x1ba>
		break;
		case DIO_PORTD:
			DDRD &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 4da:	a1 e3       	ldi	r26, 0x31	; 49
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	e1 e3       	ldi	r30, 0x31	; 49
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	48 2f       	mov	r20, r24
 4e6:	8c 81       	ldd	r24, Y+4	; 0x04
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_enuSetPinDirection+0x186>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	2a 95       	dec	r18
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_enuSetPinDirection+0x182>
 4fa:	80 95       	com	r24
 4fc:	84 23       	and	r24, r20
 4fe:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Value <<Copy_u8PinID);//set
 500:	a1 e3       	ldi	r26, 0x31	; 49
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	e1 e3       	ldi	r30, 0x31	; 49
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	48 2f       	mov	r20, r24
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	8c 81       	ldd	r24, Y+4	; 0x04
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	b9 01       	movw	r22, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_enuSetPinDirection+0x1b0>
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	8a 95       	dec	r24
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_enuSetPinDirection+0x1ac>
 524:	cb 01       	movw	r24, r22
 526:	84 2b       	or	r24, r20
 528:	8c 93       	st	X, r24
		break;
		}
		Local_enuErrorState = ES_OK;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_enuSetPinDirection+0x1c4>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 530:	83 e0       	ldi	r24, 0x03	; 3
 532:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 534:	89 81       	ldd	r24, Y+1	; 0x01
}
 536:	26 96       	adiw	r28, 0x06	; 6
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <DIO_enuSetPinValue>:
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID ,u8 Copy_u8Value){
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	00 d0       	rcall	.+0      	; 0x54e <DIO_enuSetPinValue+0x6>
 54e:	00 d0       	rcall	.+0      	; 0x550 <DIO_enuSetPinValue+0x8>
 550:	00 d0       	rcall	.+0      	; 0x552 <DIO_enuSetPinValue+0xa>
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	8a 83       	std	Y+2, r24	; 0x02
 558:	6b 83       	std	Y+3, r22	; 0x03
 55a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState  = ES_NOK ;
 55c:	19 82       	std	Y+1, r1	; 0x01
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <=DIO_PIN7) && (Copy_u8Value <= OUTPUT)){
 55e:	8a 81       	ldd	r24, Y+2	; 0x02
 560:	84 30       	cpi	r24, 0x04	; 4
 562:	08 f0       	brcs	.+2      	; 0x566 <DIO_enuSetPinValue+0x1e>
 564:	d1 c0       	rjmp	.+418    	; 0x708 <DIO_enuSetPinValue+0x1c0>
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	88 30       	cpi	r24, 0x08	; 8
 56a:	08 f0       	brcs	.+2      	; 0x56e <DIO_enuSetPinValue+0x26>
 56c:	cd c0       	rjmp	.+410    	; 0x708 <DIO_enuSetPinValue+0x1c0>
 56e:	8c 81       	ldd	r24, Y+4	; 0x04
 570:	82 30       	cpi	r24, 0x02	; 2
 572:	08 f0       	brcs	.+2      	; 0x576 <DIO_enuSetPinValue+0x2e>
 574:	c9 c0       	rjmp	.+402    	; 0x708 <DIO_enuSetPinValue+0x1c0>
			switch(Copy_u8PortID){
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	3e 83       	std	Y+6, r19	; 0x06
 57e:	2d 83       	std	Y+5, r18	; 0x05
 580:	6d 81       	ldd	r22, Y+5	; 0x05
 582:	7e 81       	ldd	r23, Y+6	; 0x06
 584:	61 30       	cpi	r22, 0x01	; 1
 586:	71 05       	cpc	r23, r1
 588:	09 f4       	brne	.+2      	; 0x58c <DIO_enuSetPinValue+0x44>
 58a:	41 c0       	rjmp	.+130    	; 0x60e <DIO_enuSetPinValue+0xc6>
 58c:	8d 81       	ldd	r24, Y+5	; 0x05
 58e:	9e 81       	ldd	r25, Y+6	; 0x06
 590:	82 30       	cpi	r24, 0x02	; 2
 592:	91 05       	cpc	r25, r1
 594:	34 f4       	brge	.+12     	; 0x5a2 <DIO_enuSetPinValue+0x5a>
 596:	2d 81       	ldd	r18, Y+5	; 0x05
 598:	3e 81       	ldd	r19, Y+6	; 0x06
 59a:	21 15       	cp	r18, r1
 59c:	31 05       	cpc	r19, r1
 59e:	71 f0       	breq	.+28     	; 0x5bc <DIO_enuSetPinValue+0x74>
 5a0:	b0 c0       	rjmp	.+352    	; 0x702 <DIO_enuSetPinValue+0x1ba>
 5a2:	6d 81       	ldd	r22, Y+5	; 0x05
 5a4:	7e 81       	ldd	r23, Y+6	; 0x06
 5a6:	62 30       	cpi	r22, 0x02	; 2
 5a8:	71 05       	cpc	r23, r1
 5aa:	09 f4       	brne	.+2      	; 0x5ae <DIO_enuSetPinValue+0x66>
 5ac:	59 c0       	rjmp	.+178    	; 0x660 <DIO_enuSetPinValue+0x118>
 5ae:	8d 81       	ldd	r24, Y+5	; 0x05
 5b0:	9e 81       	ldd	r25, Y+6	; 0x06
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	91 05       	cpc	r25, r1
 5b6:	09 f4       	brne	.+2      	; 0x5ba <DIO_enuSetPinValue+0x72>
 5b8:	7c c0       	rjmp	.+248    	; 0x6b2 <DIO_enuSetPinValue+0x16a>
 5ba:	a3 c0       	rjmp	.+326    	; 0x702 <DIO_enuSetPinValue+0x1ba>
			case DIO_PORTA:
				PORTA &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 5bc:	ab e3       	ldi	r26, 0x3B	; 59
 5be:	b0 e0       	ldi	r27, 0x00	; 0
 5c0:	eb e3       	ldi	r30, 0x3B	; 59
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	48 2f       	mov	r20, r24
 5c8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ca:	28 2f       	mov	r18, r24
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_enuSetPinValue+0x90>
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	2a 95       	dec	r18
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_enuSetPinValue+0x8c>
 5dc:	80 95       	com	r24
 5de:	84 23       	and	r24, r20
 5e0:	8c 93       	st	X, r24
				PORTA |=(Copy_u8Value <<Copy_u8PinID);//set
 5e2:	ab e3       	ldi	r26, 0x3B	; 59
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	eb e3       	ldi	r30, 0x3B	; 59
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	48 2f       	mov	r20, r24
 5ee:	8c 81       	ldd	r24, Y+4	; 0x04
 5f0:	28 2f       	mov	r18, r24
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	88 2f       	mov	r24, r24
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	b9 01       	movw	r22, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_enuSetPinValue+0xba>
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_enuSetPinValue+0xb6>
 606:	cb 01       	movw	r24, r22
 608:	84 2b       	or	r24, r20
 60a:	8c 93       	st	X, r24
 60c:	7a c0       	rjmp	.+244    	; 0x702 <DIO_enuSetPinValue+0x1ba>
			break;
			case DIO_PORTB:
				PORTB &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 60e:	a8 e3       	ldi	r26, 0x38	; 56
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	e8 e3       	ldi	r30, 0x38	; 56
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	48 2f       	mov	r20, r24
 61a:	8b 81       	ldd	r24, Y+3	; 0x03
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_enuSetPinValue+0xe2>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	2a 95       	dec	r18
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_enuSetPinValue+0xde>
 62e:	80 95       	com	r24
 630:	84 23       	and	r24, r20
 632:	8c 93       	st	X, r24
				PORTB |=(Copy_u8Value <<Copy_u8PinID);//set
 634:	a8 e3       	ldi	r26, 0x38	; 56
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	e8 e3       	ldi	r30, 0x38	; 56
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	48 2f       	mov	r20, r24
 640:	8c 81       	ldd	r24, Y+4	; 0x04
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	8b 81       	ldd	r24, Y+3	; 0x03
 648:	88 2f       	mov	r24, r24
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	b9 01       	movw	r22, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_enuSetPinValue+0x10c>
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	8a 95       	dec	r24
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_enuSetPinValue+0x108>
 658:	cb 01       	movw	r24, r22
 65a:	84 2b       	or	r24, r20
 65c:	8c 93       	st	X, r24
 65e:	51 c0       	rjmp	.+162    	; 0x702 <DIO_enuSetPinValue+0x1ba>
			break;
			case DIO_PORTC:
				PORTC &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 660:	a5 e3       	ldi	r26, 0x35	; 53
 662:	b0 e0       	ldi	r27, 0x00	; 0
 664:	e5 e3       	ldi	r30, 0x35	; 53
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	48 2f       	mov	r20, r24
 66c:	8b 81       	ldd	r24, Y+3	; 0x03
 66e:	28 2f       	mov	r18, r24
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_enuSetPinValue+0x134>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	2a 95       	dec	r18
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_enuSetPinValue+0x130>
 680:	80 95       	com	r24
 682:	84 23       	and	r24, r20
 684:	8c 93       	st	X, r24
				PORTC |=(Copy_u8Value <<Copy_u8PinID);//set
 686:	a5 e3       	ldi	r26, 0x35	; 53
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	e5 e3       	ldi	r30, 0x35	; 53
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	80 81       	ld	r24, Z
 690:	48 2f       	mov	r20, r24
 692:	8c 81       	ldd	r24, Y+4	; 0x04
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	8b 81       	ldd	r24, Y+3	; 0x03
 69a:	88 2f       	mov	r24, r24
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	b9 01       	movw	r22, r18
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_enuSetPinValue+0x15e>
 6a2:	66 0f       	add	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	8a 95       	dec	r24
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_enuSetPinValue+0x15a>
 6aa:	cb 01       	movw	r24, r22
 6ac:	84 2b       	or	r24, r20
 6ae:	8c 93       	st	X, r24
 6b0:	28 c0       	rjmp	.+80     	; 0x702 <DIO_enuSetPinValue+0x1ba>
			break;
			case DIO_PORTD:
				PORTD &=~(DIO_MASK_BIT <<Copy_u8PinID); //clear
 6b2:	a2 e3       	ldi	r26, 0x32	; 50
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	e2 e3       	ldi	r30, 0x32	; 50
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	48 2f       	mov	r20, r24
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	28 2f       	mov	r18, r24
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_enuSetPinValue+0x186>
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	2a 95       	dec	r18
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_enuSetPinValue+0x182>
 6d2:	80 95       	com	r24
 6d4:	84 23       	and	r24, r20
 6d6:	8c 93       	st	X, r24
				PORTD |=(Copy_u8Value <<Copy_u8PinID);//set
 6d8:	a2 e3       	ldi	r26, 0x32	; 50
 6da:	b0 e0       	ldi	r27, 0x00	; 0
 6dc:	e2 e3       	ldi	r30, 0x32	; 50
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	48 2f       	mov	r20, r24
 6e4:	8c 81       	ldd	r24, Y+4	; 0x04
 6e6:	28 2f       	mov	r18, r24
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	8b 81       	ldd	r24, Y+3	; 0x03
 6ec:	88 2f       	mov	r24, r24
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	b9 01       	movw	r22, r18
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_enuSetPinValue+0x1b0>
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	8a 95       	dec	r24
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_enuSetPinValue+0x1ac>
 6fc:	cb 01       	movw	r24, r22
 6fe:	84 2b       	or	r24, r20
 700:	8c 93       	st	X, r24
			break;
			}
			Local_enuErrorState = ES_OK;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	89 83       	std	Y+1, r24	; 0x01
 706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_enuSetPinValue+0x1c4>
		}
		else{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 708:	83 e0       	ldi	r24, 0x03	; 3
 70a:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
 70c:	89 81       	ldd	r24, Y+1	; 0x01
}
 70e:	26 96       	adiw	r28, 0x06	; 6
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	cf 91       	pop	r28
 71c:	df 91       	pop	r29
 71e:	08 95       	ret

00000720 <DIO_enuTogPinValue>:
ES_t DIO_enuTogPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID){
 720:	df 93       	push	r29
 722:	cf 93       	push	r28
 724:	00 d0       	rcall	.+0      	; 0x726 <DIO_enuTogPinValue+0x6>
 726:	00 d0       	rcall	.+0      	; 0x728 <DIO_enuTogPinValue+0x8>
 728:	0f 92       	push	r0
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	8a 83       	std	Y+2, r24	; 0x02
 730:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState  = ES_NOK ;
 732:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <=DIO_PIN7)){
 734:	8a 81       	ldd	r24, Y+2	; 0x02
 736:	84 30       	cpi	r24, 0x04	; 4
 738:	08 f0       	brcs	.+2      	; 0x73c <DIO_enuTogPinValue+0x1c>
 73a:	75 c0       	rjmp	.+234    	; 0x826 <DIO_enuTogPinValue+0x106>
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	88 30       	cpi	r24, 0x08	; 8
 740:	08 f0       	brcs	.+2      	; 0x744 <DIO_enuTogPinValue+0x24>
 742:	71 c0       	rjmp	.+226    	; 0x826 <DIO_enuTogPinValue+0x106>
			switch(Copy_u8PortID){
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	28 2f       	mov	r18, r24
 748:	30 e0       	ldi	r19, 0x00	; 0
 74a:	3d 83       	std	Y+5, r19	; 0x05
 74c:	2c 83       	std	Y+4, r18	; 0x04
 74e:	8c 81       	ldd	r24, Y+4	; 0x04
 750:	9d 81       	ldd	r25, Y+5	; 0x05
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	91 05       	cpc	r25, r1
 756:	49 f1       	breq	.+82     	; 0x7aa <DIO_enuTogPinValue+0x8a>
 758:	2c 81       	ldd	r18, Y+4	; 0x04
 75a:	3d 81       	ldd	r19, Y+5	; 0x05
 75c:	22 30       	cpi	r18, 0x02	; 2
 75e:	31 05       	cpc	r19, r1
 760:	2c f4       	brge	.+10     	; 0x76c <DIO_enuTogPinValue+0x4c>
 762:	8c 81       	ldd	r24, Y+4	; 0x04
 764:	9d 81       	ldd	r25, Y+5	; 0x05
 766:	00 97       	sbiw	r24, 0x00	; 0
 768:	61 f0       	breq	.+24     	; 0x782 <DIO_enuTogPinValue+0x62>
 76a:	5a c0       	rjmp	.+180    	; 0x820 <DIO_enuTogPinValue+0x100>
 76c:	2c 81       	ldd	r18, Y+4	; 0x04
 76e:	3d 81       	ldd	r19, Y+5	; 0x05
 770:	22 30       	cpi	r18, 0x02	; 2
 772:	31 05       	cpc	r19, r1
 774:	71 f1       	breq	.+92     	; 0x7d2 <DIO_enuTogPinValue+0xb2>
 776:	8c 81       	ldd	r24, Y+4	; 0x04
 778:	9d 81       	ldd	r25, Y+5	; 0x05
 77a:	83 30       	cpi	r24, 0x03	; 3
 77c:	91 05       	cpc	r25, r1
 77e:	e9 f1       	breq	.+122    	; 0x7fa <DIO_enuTogPinValue+0xda>
 780:	4f c0       	rjmp	.+158    	; 0x820 <DIO_enuTogPinValue+0x100>
			case DIO_PORTA:
				PORTA ^=(DIO_MASK_BIT <<Copy_u8PinID);
 782:	ab e3       	ldi	r26, 0x3B	; 59
 784:	b0 e0       	ldi	r27, 0x00	; 0
 786:	eb e3       	ldi	r30, 0x3B	; 59
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	48 2f       	mov	r20, r24
 78e:	8b 81       	ldd	r24, Y+3	; 0x03
 790:	28 2f       	mov	r18, r24
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	02 2e       	mov	r0, r18
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_enuTogPinValue+0x80>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	0a 94       	dec	r0
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_enuTogPinValue+0x7c>
 7a4:	84 27       	eor	r24, r20
 7a6:	8c 93       	st	X, r24
 7a8:	3b c0       	rjmp	.+118    	; 0x820 <DIO_enuTogPinValue+0x100>
			break;
			case DIO_PORTB:
				PORTB ^=(DIO_MASK_BIT <<Copy_u8PinID);
 7aa:	a8 e3       	ldi	r26, 0x38	; 56
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	e8 e3       	ldi	r30, 0x38	; 56
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	48 2f       	mov	r20, r24
 7b6:	8b 81       	ldd	r24, Y+3	; 0x03
 7b8:	28 2f       	mov	r18, r24
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 2e       	mov	r0, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_enuTogPinValue+0xa8>
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	0a 94       	dec	r0
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_enuTogPinValue+0xa4>
 7cc:	84 27       	eor	r24, r20
 7ce:	8c 93       	st	X, r24
 7d0:	27 c0       	rjmp	.+78     	; 0x820 <DIO_enuTogPinValue+0x100>
			break;
			case DIO_PORTC:
				PORTC ^=(DIO_MASK_BIT <<Copy_u8PinID);
 7d2:	a5 e3       	ldi	r26, 0x35	; 53
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	e5 e3       	ldi	r30, 0x35	; 53
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	48 2f       	mov	r20, r24
 7de:	8b 81       	ldd	r24, Y+3	; 0x03
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 2e       	mov	r0, r18
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_enuTogPinValue+0xd0>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	0a 94       	dec	r0
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_enuTogPinValue+0xcc>
 7f4:	84 27       	eor	r24, r20
 7f6:	8c 93       	st	X, r24
 7f8:	13 c0       	rjmp	.+38     	; 0x820 <DIO_enuTogPinValue+0x100>
			break;
			case DIO_PORTD:
				PORTD ^=(DIO_MASK_BIT <<Copy_u8PinID);
 7fa:	a2 e3       	ldi	r26, 0x32	; 50
 7fc:	b0 e0       	ldi	r27, 0x00	; 0
 7fe:	e2 e3       	ldi	r30, 0x32	; 50
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	48 2f       	mov	r20, r24
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	28 2f       	mov	r18, r24
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	02 2e       	mov	r0, r18
 812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_enuTogPinValue+0xf8>
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	0a 94       	dec	r0
 81a:	e2 f7       	brpl	.-8      	; 0x814 <DIO_enuTogPinValue+0xf4>
 81c:	84 27       	eor	r24, r20
 81e:	8c 93       	st	X, r24
			break;
			}
			Local_enuErrorState = ES_OK;
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_enuTogPinValue+0x10a>
		}
		else{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 826:	83 e0       	ldi	r24, 0x03	; 3
 828:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
 82a:	89 81       	ldd	r24, Y+1	; 0x01
}
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	cf 91       	pop	r28
 838:	df 91       	pop	r29
 83a:	08 95       	ret

0000083c <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 * Copy_pu8Value , u8 Copy_u8PinID){
 83c:	df 93       	push	r29
 83e:	cf 93       	push	r28
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
 844:	27 97       	sbiw	r28, 0x07	; 7
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	cd bf       	out	0x3d, r28	; 61
 850:	8a 83       	std	Y+2, r24	; 0x02
 852:	7c 83       	std	Y+4, r23	; 0x04
 854:	6b 83       	std	Y+3, r22	; 0x03
 856:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState  = ES_NOK ;
 858:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL){
 85a:	8b 81       	ldd	r24, Y+3	; 0x03
 85c:	9c 81       	ldd	r25, Y+4	; 0x04
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	09 f4       	brne	.+2      	; 0x864 <__stack+0x5>
 862:	7e c0       	rjmp	.+252    	; 0x960 <__stack+0x101>
		if((Copy_u8PortID <= DIO_PORTD) && (Copy_u8PinID <=DIO_PIN7)){
 864:	8a 81       	ldd	r24, Y+2	; 0x02
 866:	84 30       	cpi	r24, 0x04	; 4
 868:	08 f0       	brcs	.+2      	; 0x86c <__stack+0xd>
 86a:	77 c0       	rjmp	.+238    	; 0x95a <__stack+0xfb>
 86c:	8d 81       	ldd	r24, Y+5	; 0x05
 86e:	88 30       	cpi	r24, 0x08	; 8
 870:	08 f0       	brcs	.+2      	; 0x874 <__stack+0x15>
 872:	73 c0       	rjmp	.+230    	; 0x95a <__stack+0xfb>
			switch(Copy_u8PortID)
 874:	8a 81       	ldd	r24, Y+2	; 0x02
 876:	28 2f       	mov	r18, r24
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	3f 83       	std	Y+7, r19	; 0x07
 87c:	2e 83       	std	Y+6, r18	; 0x06
 87e:	4e 81       	ldd	r20, Y+6	; 0x06
 880:	5f 81       	ldd	r21, Y+7	; 0x07
 882:	41 30       	cpi	r20, 0x01	; 1
 884:	51 05       	cpc	r21, r1
 886:	59 f1       	breq	.+86     	; 0x8de <__stack+0x7f>
 888:	8e 81       	ldd	r24, Y+6	; 0x06
 88a:	9f 81       	ldd	r25, Y+7	; 0x07
 88c:	82 30       	cpi	r24, 0x02	; 2
 88e:	91 05       	cpc	r25, r1
 890:	34 f4       	brge	.+12     	; 0x89e <__stack+0x3f>
 892:	2e 81       	ldd	r18, Y+6	; 0x06
 894:	3f 81       	ldd	r19, Y+7	; 0x07
 896:	21 15       	cp	r18, r1
 898:	31 05       	cpc	r19, r1
 89a:	69 f0       	breq	.+26     	; 0x8b6 <__stack+0x57>
 89c:	5b c0       	rjmp	.+182    	; 0x954 <__stack+0xf5>
 89e:	4e 81       	ldd	r20, Y+6	; 0x06
 8a0:	5f 81       	ldd	r21, Y+7	; 0x07
 8a2:	42 30       	cpi	r20, 0x02	; 2
 8a4:	51 05       	cpc	r21, r1
 8a6:	79 f1       	breq	.+94     	; 0x906 <__stack+0xa7>
 8a8:	8e 81       	ldd	r24, Y+6	; 0x06
 8aa:	9f 81       	ldd	r25, Y+7	; 0x07
 8ac:	83 30       	cpi	r24, 0x03	; 3
 8ae:	91 05       	cpc	r25, r1
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <__stack+0x55>
 8b2:	3d c0       	rjmp	.+122    	; 0x92e <__stack+0xcf>
 8b4:	4f c0       	rjmp	.+158    	; 0x954 <__stack+0xf5>
			{
			case DIO_PORTA :
				 * Copy_pu8Value = ((PINA>>Copy_u8PinID)&DIO_MASK_BIT);
 8b6:	e9 e3       	ldi	r30, 0x39	; 57
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	28 2f       	mov	r18, r24
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	8d 81       	ldd	r24, Y+5	; 0x05
 8c2:	88 2f       	mov	r24, r24
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	a9 01       	movw	r20, r18
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
 8ca:	55 95       	asr	r21
 8cc:	47 95       	ror	r20
 8ce:	8a 95       	dec	r24
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
 8d2:	ca 01       	movw	r24, r20
 8d4:	81 70       	andi	r24, 0x01	; 1
 8d6:	eb 81       	ldd	r30, Y+3	; 0x03
 8d8:	fc 81       	ldd	r31, Y+4	; 0x04
 8da:	80 83       	st	Z, r24
 8dc:	3b c0       	rjmp	.+118    	; 0x954 <__stack+0xf5>
			break;
			case DIO_PORTB :
			     * Copy_pu8Value = ((PINB>>Copy_u8PinID)&DIO_MASK_BIT);
 8de:	e6 e3       	ldi	r30, 0x36	; 54
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	28 2f       	mov	r18, r24
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	8d 81       	ldd	r24, Y+5	; 0x05
 8ea:	88 2f       	mov	r24, r24
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	a9 01       	movw	r20, r18
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__stack+0x97>
 8f2:	55 95       	asr	r21
 8f4:	47 95       	ror	r20
 8f6:	8a 95       	dec	r24
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <__stack+0x93>
 8fa:	ca 01       	movw	r24, r20
 8fc:	81 70       	andi	r24, 0x01	; 1
 8fe:	eb 81       	ldd	r30, Y+3	; 0x03
 900:	fc 81       	ldd	r31, Y+4	; 0x04
 902:	80 83       	st	Z, r24
 904:	27 c0       	rjmp	.+78     	; 0x954 <__stack+0xf5>
			break;
			case DIO_PORTC :
				* Copy_pu8Value =  ((PINC>>Copy_u8PinID)&DIO_MASK_BIT) ;
 906:	e3 e3       	ldi	r30, 0x33	; 51
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	28 2f       	mov	r18, r24
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	8d 81       	ldd	r24, Y+5	; 0x05
 912:	88 2f       	mov	r24, r24
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	a9 01       	movw	r20, r18
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
 91a:	55 95       	asr	r21
 91c:	47 95       	ror	r20
 91e:	8a 95       	dec	r24
 920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
 922:	ca 01       	movw	r24, r20
 924:	81 70       	andi	r24, 0x01	; 1
 926:	eb 81       	ldd	r30, Y+3	; 0x03
 928:	fc 81       	ldd	r31, Y+4	; 0x04
 92a:	80 83       	st	Z, r24
 92c:	13 c0       	rjmp	.+38     	; 0x954 <__stack+0xf5>
			break;
			case DIO_PORTD :
				 * Copy_pu8Value = ((PIND>>Copy_u8PinID)&DIO_MASK_BIT) ;
 92e:	e0 e3       	ldi	r30, 0x30	; 48
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	28 2f       	mov	r18, r24
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	8d 81       	ldd	r24, Y+5	; 0x05
 93a:	88 2f       	mov	r24, r24
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	a9 01       	movw	r20, r18
 940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0xe7>
 942:	55 95       	asr	r21
 944:	47 95       	ror	r20
 946:	8a 95       	dec	r24
 948:	e2 f7       	brpl	.-8      	; 0x942 <__stack+0xe3>
 94a:	ca 01       	movw	r24, r20
 94c:	81 70       	andi	r24, 0x01	; 1
 94e:	eb 81       	ldd	r30, Y+3	; 0x03
 950:	fc 81       	ldd	r31, Y+4	; 0x04
 952:	80 83       	st	Z, r24
			break;
			}
				 Local_enuErrorState = ES_OK;
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	89 83       	std	Y+1, r24	; 0x01
 958:	05 c0       	rjmp	.+10     	; 0x964 <__stack+0x105>
			}
		else {
				 Local_enuErrorState = ES_OUT_OF_RANGE;  // ERROR ID
 95a:	83 e0       	ldi	r24, 0x03	; 3
 95c:	89 83       	std	Y+1, r24	; 0x01
 95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x105>
		}
	}
	else{
		 Local_enuErrorState = ES_NULL_POINTER;
 960:	82 e0       	ldi	r24, 0x02	; 2
 962:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 964:	89 81       	ldd	r24, Y+1	; 0x01
}
 966:	27 96       	adiw	r28, 0x07	; 7
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	de bf       	out	0x3e, r29	; 62
 96e:	0f be       	out	0x3f, r0	; 63
 970:	cd bf       	out	0x3d, r28	; 61
 972:	cf 91       	pop	r28
 974:	df 91       	pop	r29
 976:	08 95       	ret

00000978 <Switch_enuInit>:


#include  "DIO_int.h"


ES_t Switch_enuInit(SW_t * Copy_AstrSwitchs){
 978:	df 93       	push	r29
 97a:	cf 93       	push	r28
 97c:	00 d0       	rcall	.+0      	; 0x97e <Switch_enuInit+0x6>
 97e:	00 d0       	rcall	.+0      	; 0x980 <Switch_enuInit+0x8>
 980:	cd b7       	in	r28, 0x3d	; 61
 982:	de b7       	in	r29, 0x3e	; 62
 984:	9c 83       	std	Y+4, r25	; 0x04
 986:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 988:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator = 0;
 98a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_AstrSwitchs != NULL){
 98c:	8b 81       	ldd	r24, Y+3	; 0x03
 98e:	9c 81       	ldd	r25, Y+4	; 0x04
 990:	00 97       	sbiw	r24, 0x00	; 0
 992:	09 f4       	brne	.+2      	; 0x996 <Switch_enuInit+0x1e>
 994:	5c c0       	rjmp	.+184    	; 0xa4e <Switch_enuInit+0xd6>

		for(Local_u8Iterator =0; Local_u8Iterator<SW_NUM ;Local_u8Iterator++){
 996:	19 82       	std	Y+1, r1	; 0x01
 998:	55 c0       	rjmp	.+170    	; 0xa44 <Switch_enuInit+0xcc>
			Local_enuErrorState = DIO_enuSetPinDirection(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID,DIO_u8INPUT,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID );
 99a:	89 81       	ldd	r24, Y+1	; 0x01
 99c:	28 2f       	mov	r18, r24
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	c9 01       	movw	r24, r18
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	28 0f       	add	r18, r24
 9a8:	39 1f       	adc	r19, r25
 9aa:	8b 81       	ldd	r24, Y+3	; 0x03
 9ac:	9c 81       	ldd	r25, Y+4	; 0x04
 9ae:	fc 01       	movw	r30, r24
 9b0:	e2 0f       	add	r30, r18
 9b2:	f3 1f       	adc	r31, r19
 9b4:	40 81       	ld	r20, Z
 9b6:	89 81       	ldd	r24, Y+1	; 0x01
 9b8:	28 2f       	mov	r18, r24
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	c9 01       	movw	r24, r18
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	28 0f       	add	r18, r24
 9c4:	39 1f       	adc	r19, r25
 9c6:	8b 81       	ldd	r24, Y+3	; 0x03
 9c8:	9c 81       	ldd	r25, Y+4	; 0x04
 9ca:	fc 01       	movw	r30, r24
 9cc:	e2 0f       	add	r30, r18
 9ce:	f3 1f       	adc	r31, r19
 9d0:	91 81       	ldd	r25, Z+1	; 0x01
 9d2:	84 2f       	mov	r24, r20
 9d4:	60 e0       	ldi	r22, 0x00	; 0
 9d6:	49 2f       	mov	r20, r25
 9d8:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_enuSetPinDirection>
 9dc:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(Copy_AstrSwitchs[Local_u8Iterator].SW_PortID,Copy_AstrSwitchs[Local_u8Iterator].SW_PinID ,Copy_AstrSwitchs[Local_u8Iterator].SW_Status );
 9de:	89 81       	ldd	r24, Y+1	; 0x01
 9e0:	28 2f       	mov	r18, r24
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	c9 01       	movw	r24, r18
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	28 0f       	add	r18, r24
 9ec:	39 1f       	adc	r19, r25
 9ee:	8b 81       	ldd	r24, Y+3	; 0x03
 9f0:	9c 81       	ldd	r25, Y+4	; 0x04
 9f2:	fc 01       	movw	r30, r24
 9f4:	e2 0f       	add	r30, r18
 9f6:	f3 1f       	adc	r31, r19
 9f8:	50 81       	ld	r21, Z
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
 9fc:	28 2f       	mov	r18, r24
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	c9 01       	movw	r24, r18
 a02:	88 0f       	add	r24, r24
 a04:	99 1f       	adc	r25, r25
 a06:	28 0f       	add	r18, r24
 a08:	39 1f       	adc	r19, r25
 a0a:	8b 81       	ldd	r24, Y+3	; 0x03
 a0c:	9c 81       	ldd	r25, Y+4	; 0x04
 a0e:	fc 01       	movw	r30, r24
 a10:	e2 0f       	add	r30, r18
 a12:	f3 1f       	adc	r31, r19
 a14:	41 81       	ldd	r20, Z+1	; 0x01
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	28 2f       	mov	r18, r24
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	c9 01       	movw	r24, r18
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	28 0f       	add	r18, r24
 a24:	39 1f       	adc	r19, r25
 a26:	8b 81       	ldd	r24, Y+3	; 0x03
 a28:	9c 81       	ldd	r25, Y+4	; 0x04
 a2a:	fc 01       	movw	r30, r24
 a2c:	e2 0f       	add	r30, r18
 a2e:	f3 1f       	adc	r31, r19
 a30:	92 81       	ldd	r25, Z+2	; 0x02
 a32:	85 2f       	mov	r24, r21
 a34:	64 2f       	mov	r22, r20
 a36:	49 2f       	mov	r20, r25
 a38:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_enuSetPinValue>
 a3c:	8a 83       	std	Y+2, r24	; 0x02
ES_t Switch_enuInit(SW_t * Copy_AstrSwitchs){
	ES_t Local_enuErrorState = ES_NOK;
	u8 Local_u8Iterator = 0;
	if(Copy_AstrSwitchs != NULL){

		for(Local_u8Iterator =0; Local_u8Iterator<SW_NUM ;Local_u8Iterator++){
 a3e:	89 81       	ldd	r24, Y+1	; 0x01
 a40:	8f 5f       	subi	r24, 0xFF	; 255
 a42:	89 83       	std	Y+1, r24	; 0x01
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	83 30       	cpi	r24, 0x03	; 3
 a48:	08 f4       	brcc	.+2      	; 0xa4c <Switch_enuInit+0xd4>
 a4a:	a7 cf       	rjmp	.-178    	; 0x99a <Switch_enuInit+0x22>
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <Switch_enuInit+0xda>

		}

	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
 a4e:	82 e0       	ldi	r24, 0x02	; 2
 a50:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState ;
 a52:	8a 81       	ldd	r24, Y+2	; 0x02
}
 a54:	0f 90       	pop	r0
 a56:	0f 90       	pop	r0
 a58:	0f 90       	pop	r0
 a5a:	0f 90       	pop	r0
 a5c:	cf 91       	pop	r28
 a5e:	df 91       	pop	r29
 a60:	08 95       	ret

00000a62 <Switch_enuGetState>:
ES_t Switch_enuGetState(SW_t * Copy_AstrSwitchs, u8 * Copy_pu8SwState){
 a62:	df 93       	push	r29
 a64:	cf 93       	push	r28
 a66:	00 d0       	rcall	.+0      	; 0xa68 <Switch_enuGetState+0x6>
 a68:	00 d0       	rcall	.+0      	; 0xa6a <Switch_enuGetState+0x8>
 a6a:	0f 92       	push	r0
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62
 a70:	9b 83       	std	Y+3, r25	; 0x03
 a72:	8a 83       	std	Y+2, r24	; 0x02
 a74:	7d 83       	std	Y+5, r23	; 0x05
 a76:	6c 83       	std	Y+4, r22	; 0x04

	ES_t Local_enuErrorState = ES_NOK;
 a78:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_AstrSwitchs != NULL && Copy_pu8SwState != NULL){
 a7a:	8a 81       	ldd	r24, Y+2	; 0x02
 a7c:	9b 81       	ldd	r25, Y+3	; 0x03
 a7e:	00 97       	sbiw	r24, 0x00	; 0
 a80:	91 f0       	breq	.+36     	; 0xaa6 <Switch_enuGetState+0x44>
 a82:	8c 81       	ldd	r24, Y+4	; 0x04
 a84:	9d 81       	ldd	r25, Y+5	; 0x05
 a86:	00 97       	sbiw	r24, 0x00	; 0
 a88:	71 f0       	breq	.+28     	; 0xaa6 <Switch_enuGetState+0x44>
		Local_enuErrorState = DIO_enuGetPinValue(Copy_AstrSwitchs ->SW_PortID ,Copy_pu8SwState,Copy_AstrSwitchs->SW_PinID);
 a8a:	ea 81       	ldd	r30, Y+2	; 0x02
 a8c:	fb 81       	ldd	r31, Y+3	; 0x03
 a8e:	80 81       	ld	r24, Z
 a90:	ea 81       	ldd	r30, Y+2	; 0x02
 a92:	fb 81       	ldd	r31, Y+3	; 0x03
 a94:	91 81       	ldd	r25, Z+1	; 0x01
 a96:	2c 81       	ldd	r18, Y+4	; 0x04
 a98:	3d 81       	ldd	r19, Y+5	; 0x05
 a9a:	b9 01       	movw	r22, r18
 a9c:	49 2f       	mov	r20, r25
 a9e:	0e 94 1e 04 	call	0x83c	; 0x83c <DIO_enuGetPinValue>
 aa2:	89 83       	std	Y+1, r24	; 0x01
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <Switch_enuGetState+0x48>
	}
	else {
		Local_enuErrorState =ES_NULL_POINTER;
 aa6:	82 e0       	ldi	r24, 0x02	; 2
 aa8:	89 83       	std	Y+1, r24	; 0x01
	}

    return Local_enuErrorState ;
 aaa:	89 81       	ldd	r24, Y+1	; 0x01
}
 aac:	0f 90       	pop	r0
 aae:	0f 90       	pop	r0
 ab0:	0f 90       	pop	r0
 ab2:	0f 90       	pop	r0
 ab4:	0f 90       	pop	r0
 ab6:	cf 91       	pop	r28
 ab8:	df 91       	pop	r29
 aba:	08 95       	ret

00000abc <main>:
#include  "Switch_int.h"


extern SW_t Switch_AstrSwitchState [SW_NUM];
int main(void)
{
 abc:	df 93       	push	r29
 abe:	cf 93       	push	r28
 ac0:	0f 92       	push	r0
 ac2:	cd b7       	in	r28, 0x3d	; 61
 ac4:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit();
 ac6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuInit>
	Switch_enuInit(Switch_AstrSwitchState);
 aca:	80 e6       	ldi	r24, 0x60	; 96
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 bc 04 	call	0x978	; 0x978 <Switch_enuInit>
	u8 pinstate = 0;
 ad2:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		Switch_enuGetState(&Switch_AstrSwitchState[1],&pinstate);
 ad4:	83 e6       	ldi	r24, 0x63	; 99
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	9e 01       	movw	r18, r28
 ada:	2f 5f       	subi	r18, 0xFF	; 255
 adc:	3f 4f       	sbci	r19, 0xFF	; 255
 ade:	b9 01       	movw	r22, r18
 ae0:	0e 94 31 05 	call	0xa62	; 0xa62 <Switch_enuGetState>
		if(pinstate == 0){
 ae4:	89 81       	ldd	r24, Y+1	; 0x01
 ae6:	88 23       	and	r24, r24
 ae8:	31 f4       	brne	.+12     	; 0xaf6 <main+0x3a>
			DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN0,DIO_u8HIGH);
 aea:	80 e0       	ldi	r24, 0x00	; 0
 aec:	60 e0       	ldi	r22, 0x00	; 0
 aee:	41 e0       	ldi	r20, 0x01	; 1
 af0:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_enuSetPinValue>
 af4:	ef cf       	rjmp	.-34     	; 0xad4 <main+0x18>

		}
		else{
			DIO_enuSetPinValue(DIO_u8PORTA ,DIO_u8PIN0,DIO_u8LOW);
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	40 e0       	ldi	r20, 0x00	; 0
 afc:	0e 94 a4 02 	call	0x548	; 0x548 <DIO_enuSetPinValue>
 b00:	e9 cf       	rjmp	.-46     	; 0xad4 <main+0x18>

00000b02 <_exit>:
 b02:	f8 94       	cli

00000b04 <__stop_program>:
 b04:	ff cf       	rjmp	.-2      	; 0xb04 <__stop_program>
